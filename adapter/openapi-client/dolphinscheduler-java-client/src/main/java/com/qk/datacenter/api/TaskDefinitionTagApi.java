/*
 * Dolphin Scheduler Api Docs
 * Dolphin Scheduler Api Docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.qk.datacenter.api;

import com.qk.datacenter.client.ApiClient;
import com.qk.datacenter.client.ApiException;
import com.qk.datacenter.client.ApiResponse;
import com.qk.datacenter.client.Pair;

import com.qk.datacenter.model.Result;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-18T14:27:46.433909+08:00[Asia/Shanghai]")
public class TaskDefinitionTagApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TaskDefinitionTagApi() {
    this(new ApiClient());
  }

  public TaskDefinitionTagApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * save
   * CREATE_TASK_DEFINITION_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson TASK_DEFINITION_JSON (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createTaskDefinitionUsingPOST(String projectCode, String taskDefinitionJson) throws ApiException {
    ApiResponse<Result> localVarResponse = createTaskDefinitionUsingPOSTWithHttpInfo(projectCode, taskDefinitionJson);
    return localVarResponse.getData();
  }

  /**
   * save
   * CREATE_TASK_DEFINITION_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson TASK_DEFINITION_JSON (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createTaskDefinitionUsingPOSTWithHttpInfo(String projectCode, String taskDefinitionJson) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTaskDefinitionUsingPOSTRequestBuilder(projectCode, taskDefinitionJson);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createTaskDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTaskDefinitionUsingPOSTRequestBuilder(String projectCode, String taskDefinitionJson) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling createTaskDefinitionUsingPOST");
    }
    // verify the required parameter 'taskDefinitionJson' is set
    if (taskDefinitionJson == null) {
      throw new ApiException(400, "Missing the required parameter 'taskDefinitionJson' when calling createTaskDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDefinitionJson", taskDefinitionJson));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteTaskDefinition
   * DELETE_TASK_DEFINITION_BY_CODE_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteTaskDefinitionByCodeUsingDELETE(Long code, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteTaskDefinitionByCodeUsingDELETEWithHttpInfo(code, projectCode);
    return localVarResponse.getData();
  }

  /**
   * deleteTaskDefinition
   * DELETE_TASK_DEFINITION_BY_CODE_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteTaskDefinitionByCodeUsingDELETEWithHttpInfo(Long code, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTaskDefinitionByCodeUsingDELETERequestBuilder(code, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteTaskDefinitionByCodeUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTaskDefinitionByCodeUsingDELETERequestBuilder(Long code, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling deleteTaskDefinitionByCodeUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteTaskDefinitionByCodeUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteVersion
   * DELETE_TASK_DEFINITION_VERSION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteTaskDefinitionVersionUsingDELETE(Long code, Long projectCode, Integer version) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteTaskDefinitionVersionUsingDELETEWithHttpInfo(code, projectCode, version);
    return localVarResponse.getData();
  }

  /**
   * deleteVersion
   * DELETE_TASK_DEFINITION_VERSION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteTaskDefinitionVersionUsingDELETEWithHttpInfo(Long code, Long projectCode, Integer version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTaskDefinitionVersionUsingDELETERequestBuilder(code, projectCode, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteTaskDefinitionVersionUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTaskDefinitionVersionUsingDELETERequestBuilder(Long code, Long projectCode, Integer version) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling deleteTaskDefinitionVersionUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteTaskDefinitionVersionUsingDELETE");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling deleteTaskDefinitionVersionUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}/versions/{version}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * genTaskCodeList
   * GEN_TASK_CODE_LIST_NOTES
   * @param genNum GEN_NUM (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result genTaskCodeListUsingGET(Integer genNum) throws ApiException {
    ApiResponse<Result> localVarResponse = genTaskCodeListUsingGETWithHttpInfo(genNum);
    return localVarResponse.getData();
  }

  /**
   * genTaskCodeList
   * GEN_TASK_CODE_LIST_NOTES
   * @param genNum GEN_NUM (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> genTaskCodeListUsingGETWithHttpInfo(Integer genNum) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = genTaskCodeListUsingGETRequestBuilder(genNum);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("genTaskCodeListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder genTaskCodeListUsingGETRequestBuilder(Integer genNum) throws ApiException {
    // verify the required parameter 'genNum' is set
    if (genNum == null) {
      throw new ApiException(400, "Missing the required parameter 'genNum' when calling genTaskCodeListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/gen-task-codes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("genNum", genNum));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskDefinitionByCode
   * QUERY_TASK_DEFINITION_DETAIL_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskDefinitionDetailUsingGET(Long code, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskDefinitionDetailUsingGETWithHttpInfo(code, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryTaskDefinitionByCode
   * QUERY_TASK_DEFINITION_DETAIL_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskDefinitionDetailUsingGETWithHttpInfo(Long code, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskDefinitionDetailUsingGETRequestBuilder(code, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskDefinitionDetailUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskDefinitionDetailUsingGETRequestBuilder(Long code, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling queryTaskDefinitionDetailUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTaskDefinitionDetailUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskDefinitionListPaging
   * QUERY_TASK_DEFINITION_LIST_PAGING_NOTES
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param searchVal 搜索值 (optional)
   * @param taskType TASK_TYPE (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskDefinitionListPagingUsingGET(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, String taskType, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskDefinitionListPagingUsingGETWithHttpInfo(pageNo, pageSize, projectCode, searchVal, taskType, userId);
    return localVarResponse.getData();
  }

  /**
   * queryTaskDefinitionListPaging
   * QUERY_TASK_DEFINITION_LIST_PAGING_NOTES
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param searchVal 搜索值 (optional)
   * @param taskType TASK_TYPE (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskDefinitionListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, String taskType, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskDefinitionListPagingUsingGETRequestBuilder(pageNo, pageSize, projectCode, searchVal, taskType, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskDefinitionListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskDefinitionListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, String taskType, Integer userId) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryTaskDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryTaskDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTaskDefinitionListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskType", taskType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryVersions
   * QUERY_TASK_DEFINITION_VERSIONS_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskDefinitionVersionsUsingGET(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskDefinitionVersionsUsingGETWithHttpInfo(code, pageNo, pageSize, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryVersions
   * QUERY_TASK_DEFINITION_VERSIONS_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskDefinitionVersionsUsingGETWithHttpInfo(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskDefinitionVersionsUsingGETRequestBuilder(code, pageNo, pageSize, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskDefinitionVersionsUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskDefinitionVersionsUsingGETRequestBuilder(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling queryTaskDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryTaskDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryTaskDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTaskDefinitionVersionsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}/versions"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * releaseTaskDefinition
   * RELEASE_TASK_DEFINITION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode 流程定义名称 (required)
   * @param releaseState 发布流程定义 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result releaseTaskDefinitionUsingPOST(Long code, String projectCode, Object releaseState) throws ApiException {
    ApiResponse<Result> localVarResponse = releaseTaskDefinitionUsingPOSTWithHttpInfo(code, projectCode, releaseState);
    return localVarResponse.getData();
  }

  /**
   * releaseTaskDefinition
   * RELEASE_TASK_DEFINITION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode 流程定义名称 (required)
   * @param releaseState 发布流程定义 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> releaseTaskDefinitionUsingPOSTWithHttpInfo(Long code, String projectCode, Object releaseState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = releaseTaskDefinitionUsingPOSTRequestBuilder(code, projectCode, releaseState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("releaseTaskDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder releaseTaskDefinitionUsingPOSTRequestBuilder(Long code, String projectCode, Object releaseState) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling releaseTaskDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling releaseTaskDefinitionUsingPOST");
    }
    // verify the required parameter 'releaseState' is set
    if (releaseState == null) {
      throw new ApiException(400, "Missing the required parameter 'releaseState' when calling releaseTaskDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}/release"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * switchVersion
   * SWITCH_TASK_DEFINITION_VERSION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result switchTaskDefinitionVersionUsingGET(Long code, Long projectCode, Integer version) throws ApiException {
    ApiResponse<Result> localVarResponse = switchTaskDefinitionVersionUsingGETWithHttpInfo(code, projectCode, version);
    return localVarResponse.getData();
  }

  /**
   * switchVersion
   * SWITCH_TASK_DEFINITION_VERSION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> switchTaskDefinitionVersionUsingGETWithHttpInfo(Long code, Long projectCode, Integer version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = switchTaskDefinitionVersionUsingGETRequestBuilder(code, projectCode, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("switchTaskDefinitionVersionUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder switchTaskDefinitionVersionUsingGETRequestBuilder(Long code, Long projectCode, Integer version) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling switchTaskDefinitionVersionUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling switchTaskDefinitionVersionUsingGET");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling switchTaskDefinitionVersionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}/versions/{version}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * update
   * UPDATE_TASK_DEFINITION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJsonObj TASK_DEFINITION_JSON (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateTaskDefinitionUsingPUT(Long code, String projectCode, String taskDefinitionJsonObj) throws ApiException {
    ApiResponse<Result> localVarResponse = updateTaskDefinitionUsingPUTWithHttpInfo(code, projectCode, taskDefinitionJsonObj);
    return localVarResponse.getData();
  }

  /**
   * update
   * UPDATE_TASK_DEFINITION_NOTES
   * @param code TASK_DEFINITION_CODE (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJsonObj TASK_DEFINITION_JSON (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateTaskDefinitionUsingPUTWithHttpInfo(Long code, String projectCode, String taskDefinitionJsonObj) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTaskDefinitionUsingPUTRequestBuilder(code, projectCode, taskDefinitionJsonObj);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateTaskDefinitionUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTaskDefinitionUsingPUTRequestBuilder(Long code, String projectCode, String taskDefinitionJsonObj) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling updateTaskDefinitionUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateTaskDefinitionUsingPUT");
    }
    // verify the required parameter 'taskDefinitionJsonObj' is set
    if (taskDefinitionJsonObj == null) {
      throw new ApiException(400, "Missing the required parameter 'taskDefinitionJsonObj' when calling updateTaskDefinitionUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDefinitionJsonObj", taskDefinitionJsonObj));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
