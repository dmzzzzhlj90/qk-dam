/*
 * Dolphin Scheduler Api Docs
 * Dolphin Scheduler Api Docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qk.datacenter.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.qk.datacenter.model.ClickHouseDatasourceParamDTO;
import com.qk.datacenter.model.Db2DatasourceParamDTO;
import com.qk.datacenter.model.HiveDataSourceParamDTO;
import com.qk.datacenter.model.MysqlDatasourceParamDTO;
import com.qk.datacenter.model.OracleDatasourceParamDTO;
import com.qk.datacenter.model.PostgreSqlDatasourceParamDTO;
import com.qk.datacenter.model.PrestoDatasourceParamDTO;
import com.qk.datacenter.model.SparkDatasourceParamDTO;
import com.qk.datacenter.model.SqlServerDatasourceParamDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.qk.datacenter.client.JSON;
/**
 * BaseDataSourceParamDTO
 */
@JsonPropertyOrder({
  BaseDataSourceParamDTO.JSON_PROPERTY_DATABASE,
  BaseDataSourceParamDTO.JSON_PROPERTY_HOST,
  BaseDataSourceParamDTO.JSON_PROPERTY_ID,
  BaseDataSourceParamDTO.JSON_PROPERTY_NAME,
  BaseDataSourceParamDTO.JSON_PROPERTY_NOTE,
  BaseDataSourceParamDTO.JSON_PROPERTY_OTHER,
  BaseDataSourceParamDTO.JSON_PROPERTY_PASSWORD,
  BaseDataSourceParamDTO.JSON_PROPERTY_PORT,
  BaseDataSourceParamDTO.JSON_PROPERTY_TYPE,
  BaseDataSourceParamDTO.JSON_PROPERTY_USER_NAME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-18T14:27:46.433909+08:00[Asia/Shanghai]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ClickHouseDatasourceParamDTO.class, name = "ClickHouseDatasourceParamDTO"),
  @JsonSubTypes.Type(value = Db2DatasourceParamDTO.class, name = "Db2DatasourceParamDTO"),
  @JsonSubTypes.Type(value = HiveDataSourceParamDTO.class, name = "HiveDataSourceParamDTO"),
  @JsonSubTypes.Type(value = MysqlDatasourceParamDTO.class, name = "MysqlDatasourceParamDTO"),
  @JsonSubTypes.Type(value = OracleDatasourceParamDTO.class, name = "OracleDatasourceParamDTO"),
  @JsonSubTypes.Type(value = PostgreSqlDatasourceParamDTO.class, name = "PostgreSqlDatasourceParamDTO"),
  @JsonSubTypes.Type(value = PrestoDatasourceParamDTO.class, name = "PrestoDatasourceParamDTO"),
  @JsonSubTypes.Type(value = SparkDatasourceParamDTO.class, name = "SparkDatasourceParamDTO"),
  @JsonSubTypes.Type(value = SqlServerDatasourceParamDTO.class, name = "SqlServerDatasourceParamDTO"),
})

public class BaseDataSourceParamDTO {
  public static final String JSON_PROPERTY_DATABASE = "database";
  private String database;

  public static final String JSON_PROPERTY_HOST = "host";
  private String host;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_NOTE = "note";
  private String note;

  public static final String JSON_PROPERTY_OTHER = "other";
  private Map<String, String> other = null;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    MYSQL("MYSQL"),
    
    POSTGRESQL("POSTGRESQL"),
    
    HIVE("HIVE"),
    
    SPARK("SPARK"),
    
    CLICKHOUSE("CLICKHOUSE"),
    
    ORACLE("ORACLE"),
    
    SQLSERVER("SQLSERVER"),
    
    DB2("DB2"),
    
    PRESTO("PRESTO"),
    
    H2("H2");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_USER_NAME = "userName";
  private String userName;


  public BaseDataSourceParamDTO database(String database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATABASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatabase() {
    return database;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabase(String database) {
    this.database = database;
  }


  public BaseDataSourceParamDTO host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHost(String host) {
    this.host = host;
  }


  public BaseDataSourceParamDTO id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public BaseDataSourceParamDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public BaseDataSourceParamDTO note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNote() {
    return note;
  }


  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNote(String note) {
    this.note = note;
  }


  public BaseDataSourceParamDTO other(Map<String, String> other) {
    this.other = other;
    return this;
  }

  public BaseDataSourceParamDTO putOtherItem(String key, String otherItem) {
    if (this.other == null) {
      this.other = new HashMap<>();
    }
    this.other.put(key, otherItem);
    return this;
  }

   /**
   * Get other
   * @return other
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OTHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getOther() {
    return other;
  }


  @JsonProperty(JSON_PROPERTY_OTHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOther(Map<String, String> other) {
    this.other = other;
  }


  public BaseDataSourceParamDTO password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public BaseDataSourceParamDTO port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public BaseDataSourceParamDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BaseDataSourceParamDTO userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(String userName) {
    this.userName = userName;
  }


  /**
   * Return true if this BaseDataSourceParamDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseDataSourceParamDTO baseDataSourceParamDTO = (BaseDataSourceParamDTO) o;
    return Objects.equals(this.database, baseDataSourceParamDTO.database) &&
        Objects.equals(this.host, baseDataSourceParamDTO.host) &&
        Objects.equals(this.id, baseDataSourceParamDTO.id) &&
        Objects.equals(this.name, baseDataSourceParamDTO.name) &&
        Objects.equals(this.note, baseDataSourceParamDTO.note) &&
        Objects.equals(this.other, baseDataSourceParamDTO.other) &&
        Objects.equals(this.password, baseDataSourceParamDTO.password) &&
        Objects.equals(this.port, baseDataSourceParamDTO.port) &&
        Objects.equals(this.type, baseDataSourceParamDTO.type) &&
        Objects.equals(this.userName, baseDataSourceParamDTO.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, host, id, name, note, other, password, port, type, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseDataSourceParamDTO {\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("ClickHouseDatasourceParamDTO", ClickHouseDatasourceParamDTO.class);
  mappings.put("Db2DatasourceParamDTO", Db2DatasourceParamDTO.class);
  mappings.put("HiveDataSourceParamDTO", HiveDataSourceParamDTO.class);
  mappings.put("MysqlDatasourceParamDTO", MysqlDatasourceParamDTO.class);
  mappings.put("OracleDatasourceParamDTO", OracleDatasourceParamDTO.class);
  mappings.put("PostgreSqlDatasourceParamDTO", PostgreSqlDatasourceParamDTO.class);
  mappings.put("PrestoDatasourceParamDTO", PrestoDatasourceParamDTO.class);
  mappings.put("SparkDatasourceParamDTO", SparkDatasourceParamDTO.class);
  mappings.put("SqlServerDatasourceParamDTO", SqlServerDatasourceParamDTO.class);
  mappings.put("BaseDataSourceParamDTO", BaseDataSourceParamDTO.class);
  JSON.registerDiscriminator(BaseDataSourceParamDTO.class, "type", mappings);
}
}

