plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'com.bmuschko.docker-spring-boot-application' version "${bmuschkoDocker}"
}
version "${damProfilesActive}-v${dmDatastandardsVersion}"
group "com.qk.dm.datamodel"
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}
processResources {
    expand(project.properties)
}
docker {
    springBootApplication {
        baseImage = "openjdk:11.0.12-jre-slim-buster"
        ports = [8782]
        images = ["${imagePush}/${project.name}:${version}"]
        jvmArgs = ['-Xmx248m']
    }
}
compileJava {
    doFirst {
        options.compilerArgs = [
                //添加mapStruct的一些配置
                '-Amapstruct.unmappedTargetPolicy=IGNORE',//未映射字段默认报错
                '-Amapstruct.suppressGeneratorTimestamp=false',//未映射字段默认报错
                '-Aspatial=false'//未映射字段默认报错
        ]
    }
}

dependencies {
    implementation project(":qk-data-jpa")
    implementation project(":dam-mvc-validation")
    implementation project(":dam-log")
    implementation project(":qk-model-common")
    implementation project(":metadata-common-core")
    implementation project(":qk-sqlbuilder")
    implementation project(":datasource-common-core")
    //compile project(":qk-authorization")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-loadbalancer"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.mapstruct:mapstruct'
    annotationProcessor(
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDSLVersion}:jpa",
            "org.projectlombok:lombok",
            'org.mapstruct:mapstruct-processor')
    testAnnotationProcessor('org.mapstruct:mapstruct-processor')
}
dependencyManagement {
    imports {
        mavenBom "com.qk.dam:dam-dependencies:${damDependenciesVersion}"
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "$rootDir/docs/数据服务/openapi.json".toString()
    outputDir = "/Users/daomingzhu/Documents/openapigener".toString()
    apiPackage = "com.qk.datacenter.api"
    invokerPackage = "com.qk.datacenter.client"
    modelPackage = "com.qk.datacenter.model"
    configOptions = [
            artifactId:"datacenterapi-java-client",
            artifactUrl:"qk.com",
            artifactVersion:"1.0.0",
            dateLibrary: "java8",
            library:"okhttp-gson",
            serializationLibrary:"gson",
            bigDecimalAsString:"true",
            interfaceOnly        : "true",
            useTags      : "true",
            ignoreAnyOfInEnum      : "true",
            useBeanValidation    : "false",
            performBeanValidation: "false",
            useOptional          : "true",
            serviceImplementation: "true",
            serviceInterface     : "true",
            java8                : "true",
    ]
    verbose=false
    validateSpec=false
    skipValidateSpec=true
    globalProperties = [
            modelDocs: "false",
            apiTests: "true",
            modelTests:"false"
    ]
}
test {
    useJUnitPlatform()
}
