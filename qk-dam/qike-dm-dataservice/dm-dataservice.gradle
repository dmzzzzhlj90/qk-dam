plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'com.bmuschko.docker-spring-boot-application' version "${bmuschkoDocker}"
}
version "${dmDataServiceVersion}"
group "com.qk.dm.dataservice"
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

processResources {
    expand(project.properties)
}

docker {
    springBootApplication {
        baseImage = "openjdk:11.0.12-jre-slim-buster"
        ports = [8786]
        images = ["${imagePush}/${project.name}:${version}"]
        jvmArgs = ['-Xmx248m']
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                //添加mapStruct的一些配置
                '-Amapstruct.unmappedTargetPolicy=IGNORE',//未映射字段默认报错
                '-Amapstruct.suppressGeneratorTimestamp=false',//未映射字段默认报错
                '-Aspatial=false'//未映射字段默认报错
        ]
    }
}

dependencies {
    implementation project(":qk-data-jpa")
    implementation project(":dam-mvc-validation")
    implementation project(":dam-log")
    implementation project(":qk-dataservice-spi")
    implementation project(":gateway-apisix")
    implementation project(":metadata-common-core")
    implementation project(":datasource-common-core")
    implementation project(":qk-openapi-lib")

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-loadbalancer"
    implementation group: 'org.openapi4j', name: 'openapi-core', version: '1.0.7'
    implementation group: 'org.openapi4j', name: 'openapi-parser', version: '1.0.7'

    implementation "com.github.ben-manes.caffeine:caffeine"
    compile project(":qk-authorization")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.mapstruct:mapstruct'
    annotationProcessor(
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:4.4.0:jpa",
            "org.projectlombok:lombok",
            'org.mapstruct:mapstruct-processor',
            'org.springframework.boot:spring-boot-configuration-processor')
    implementation 'com.zaxxer:HikariCP:3.4.5'
    implementation group: 'cn.hutool', name: 'hutool-db',version: '5.6.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor('org.mapstruct:mapstruct-processor')

    //json序列化
//    compile group: 'com.alibaba', name: 'fastjson', version:'1.2.62'
    compile group: 'cn.hutool', name: 'hutool-all', version: '5.3.5'
}
dependencyManagement {
    imports {
        mavenBom "com.qk.dam:dam-dependencies:${damDependenciesVersion}"
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

smartdoc {
    configFile = file("src/main/resources/smart-doc.json")
}

test {
    useJUnitPlatform()
}
