buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenLocal()
        maven {
            url = 'http://172.31.0.18:8081/repository/alibaba'
            credentials {
                username = 'qk-dm-dev'
                password = 'qk-dm-dev123'
            }
        }
    }
}
plugins {
    id 'com.github.sherter.google-java-format' version '0.9' apply false
}

group 'com.qk'
version "${version}"
description = '数据中台'
ext.snapshotBuild = version.contains("SNAPSHOT")

subprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.sherter.google-java-format'

    repositories {
        maven {
            url = 'http://172.31.0.18:8081/repository/alibaba'
            credentials {
                username = 'qk-dm-dev'
                password = 'qk-dm-dev123'
            }
        }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenLocal()

    }
    configurations.all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    plugins.withType(JavaPlugin) {
        project.sourceCompatibility = "11"
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    if (!project.name.contains("dam-dependencies")) {
        apply plugin: 'java'
        apply plugin: "smart-doc"
        task sourcesJar(type: Jar) {
            from sourceSets.main.allJava
            archiveClassifier = 'sources'
        }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    from components.java
                    artifact sourcesJar
                    afterEvaluate {
                        group = project.group
                        artifactId = project.name
                        version = project.version
                    }
                }
            }
        }
        if (project.name.startsWith("dm-")) {
            task makeReleaseJar(type: Copy) {
                def distroPath = "${project.rootDir}/distro/target"
                file(distroPath).list().each {
                    f ->
                        if (f.endsWith(".jar")&&f.startsWith(project.name)) {
                            println("${distroPath}/${f}")
                            delete "${distroPath}/${f}"
                        }
                }
                println("编译打包项目:${project.name}")
                from('build/libs')
                into(distroPath)
            }
        }
        smartdoc {
            configFile = file("src/main/resources/smart-doc.json")
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                def releasesRepoUrl = "http://172.31.0.18:8081/repository/dm-release/"
                def snapshotsRepoUrl = "http://172.31.0.18:8081/repository/dm-snapshot/"
                def url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                repository(url: url) {
                    authentication(userName: "admin", password: "zhudao123")
                }
            }
        }
    }

}
