buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://maven.aliyun.com/repository/central'}
        maven {url 'https://maven.aliyun.com/repository/public/'}
        maven {url 'https://maven.aliyun.com/repository/google/'}
        maven {url 'https://maven.aliyun.com/repository/gradle-plugin'}
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven {url 'https://repo.spring.io/plugins-release'}
        mavenCentral()
    }
}

group 'com.qk'
version "${version}"
description = '数据中台'
ext.snapshotBuild = version.contains("SNAPSHOT")


subprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {url 'https://maven.aliyun.com/repository/central'}
        maven {url 'https://maven.aliyun.com/repository/public/'}
        maven {url 'https://maven.aliyun.com/repository/google/'}
        maven {url 'https://maven.aliyun.com/repository/gradle-plugin'}
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven {url 'https://repo.spring.io/plugins-release'}
        mavenCentral()
    }
    plugins.withType(JavaPlugin) {
        project.sourceCompatibility = "11"
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    if (!project.name.contains("dam-dependencies")){
        apply plugin: 'java'
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    from components.java
                    afterEvaluate {
                        group = project.group
                        artifactId = project.name
                        version = project.version
                    }
                }
            }
        }

        task makeReleaseJar(type: Copy) {
            from('build/libs')
            into("${project.rootDir}/distro/")
//            rename { String fileName -> //在复制时重命名文件
//            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                def releasesRepoUrl = "http://172.31.0.18:8081/repository/dm-releases/"
                def snapshotsRepoUrl = "http://172.31.0.18:8081/repository/dm-snapshot/"
                def url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                repository(url: url) {
                    authentication(userName: "admin", password: "zhudao123")
                }
            }
        }
    }

}
