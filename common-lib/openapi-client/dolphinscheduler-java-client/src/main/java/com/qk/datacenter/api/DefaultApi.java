/*
 * Dolphin Scheduler Api Docs
 * Dolphin Scheduler Api Docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.qk.datacenter.api;

import com.qk.datacenter.client.ApiClient;
import com.qk.datacenter.client.ApiException;
import com.qk.datacenter.client.ApiResponse;
import com.qk.datacenter.client.Pair;

import com.qk.datacenter.model.BaseDataSourceParamDTO;
import java.time.OffsetDateTime;
import com.qk.datacenter.model.ResponseEntity;
import com.qk.datacenter.model.Result;
import com.qk.datacenter.model.ResultListWorkFlowLineage;
import com.qk.datacenter.model.ResultMapstringobject;
import com.qk.datacenter.model.ResultProcessDefinition;
import com.qk.datacenter.model.ResultProcessInstance;
import com.qk.datacenter.model.Resultobject;
import com.qk.datacenter.model.Resultstring;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-18T14:27:46.433909+08:00[Asia/Shanghai]")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * activateUser
   * 激活用户
   * @param userName 用户名 (optional)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject activateUserUsingPOST(String userName) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = activateUserUsingPOSTWithHttpInfo(userName);
    return localVarResponse.getData();
  }

  /**
   * activateUser
   * 激活用户
   * @param userName 用户名 (optional)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> activateUserUsingPOSTWithHttpInfo(String userName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = activateUserUsingPOSTRequestBuilder(userName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("activateUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder activateUserUsingPOSTRequestBuilder(String userName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/activate";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authedDatasource
   * 授权的数据源
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result authedDatasourceUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = authedDatasourceUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * authedDatasource
   * 授权的数据源
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> authedDatasourceUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authedDatasourceUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authedDatasourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authedDatasourceUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authedDatasourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/authed-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizeResourceTree
   * 授权资源树
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizeResourceTreeUsingGET(Integer userId) throws ApiException {
    authorizeResourceTreeUsingGETWithHttpInfo(userId);
  }

  /**
   * authorizeResourceTree
   * 授权资源树
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizeResourceTreeUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizeResourceTreeUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizeResourceTreeUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizeResourceTreeUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizeResourceTreeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authed-resource-tree";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizedFile
   * 授权文件
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizedFileUsingGET(Integer userId) throws ApiException {
    authorizedFileUsingGETWithHttpInfo(userId);
  }

  /**
   * authorizedFile
   * 授权文件
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizedFileUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedFileUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedFileUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedFileUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizedFileUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authed-file";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authUDFFunc
   * 授权udf函数
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizedUDFFunctionUsingGET(Integer userId) throws ApiException {
    authorizedUDFFunctionUsingGETWithHttpInfo(userId);
  }

  /**
   * authUDFFunc
   * 授权udf函数
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizedUDFFunctionUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedUDFFunctionUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedUDFFunctionUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedUDFFunctionUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizedUDFFunctionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authed-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizedUser
   * 授权用户
   * @param alertgroupId 报警组ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result authorizedUserUsingGET(String alertgroupId) throws ApiException {
    ApiResponse<Result> localVarResponse = authorizedUserUsingGETWithHttpInfo(alertgroupId);
    return localVarResponse.getData();
  }

  /**
   * authorizedUser
   * 授权用户
   * @param alertgroupId 报警组ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> authorizedUserUsingGETWithHttpInfo(String alertgroupId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedUserUsingGETRequestBuilder(alertgroupId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedUserUsingGETRequestBuilder(String alertgroupId) throws ApiException {
    // verify the required parameter 'alertgroupId' is set
    if (alertgroupId == null) {
      throw new ApiException(400, "Missing the required parameter 'alertgroupId' when calling authorizedUserUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/authed-user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertgroupId", alertgroupId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchActivateUser
   * 批量激活用户
   * @param userNames 多个用户名 (required)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject batchActivateUserUsingPOST(String userNames) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = batchActivateUserUsingPOSTWithHttpInfo(userNames);
    return localVarResponse.getData();
  }

  /**
   * batchActivateUser
   * 批量激活用户
   * @param userNames 多个用户名 (required)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> batchActivateUserUsingPOSTWithHttpInfo(String userNames) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchActivateUserUsingPOSTRequestBuilder(userNames);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchActivateUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchActivateUserUsingPOSTRequestBuilder(String userNames) throws ApiException {
    // verify the required parameter 'userNames' is set
    if (userNames == null) {
      throw new ApiException(400, "Missing the required parameter 'userNames' when calling batchActivateUserUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/batch/activate";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(userNames);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchDeleteByCodes
   * 通过流程定义ID集合批量删除流程定义
   * @param codes 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result batchDeleteProcessDefinitionByCodesUsingPOST(String codes, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = batchDeleteProcessDefinitionByCodesUsingPOSTWithHttpInfo(codes, projectCode);
    return localVarResponse.getData();
  }

  /**
   * batchDeleteByCodes
   * 通过流程定义ID集合批量删除流程定义
   * @param codes 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> batchDeleteProcessDefinitionByCodesUsingPOSTWithHttpInfo(String codes, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchDeleteProcessDefinitionByCodesUsingPOSTRequestBuilder(codes, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchDeleteProcessDefinitionByCodesUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchDeleteProcessDefinitionByCodesUsingPOSTRequestBuilder(String codes, Long projectCode) throws ApiException {
    // verify the required parameter 'codes' is set
    if (codes == null) {
      throw new ApiException(400, "Missing the required parameter 'codes' when calling batchDeleteProcessDefinitionByCodesUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling batchDeleteProcessDefinitionByCodesUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/batch-delete"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codes", codes));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchDeleteProcessInstanceByIds
   * 通过流程实例ID集合批量删除流程实例
   * @param processInstanceIds 流程实例ID集合 (required)
   * @param projectCode projectCode (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result batchDeleteProcessInstanceByIdsUsingPOST(String processInstanceIds, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = batchDeleteProcessInstanceByIdsUsingPOSTWithHttpInfo(processInstanceIds, projectCode, alertGroup, createTime, email, id, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * batchDeleteProcessInstanceByIds
   * 通过流程实例ID集合批量删除流程实例
   * @param processInstanceIds 流程实例ID集合 (required)
   * @param projectCode projectCode (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> batchDeleteProcessInstanceByIdsUsingPOSTWithHttpInfo(String processInstanceIds, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchDeleteProcessInstanceByIdsUsingPOSTRequestBuilder(processInstanceIds, projectCode, alertGroup, createTime, email, id, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchDeleteProcessInstanceByIdsUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchDeleteProcessInstanceByIdsUsingPOSTRequestBuilder(String processInstanceIds, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    // verify the required parameter 'processInstanceIds' is set
    if (processInstanceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstanceIds' when calling batchDeleteProcessInstanceByIdsUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling batchDeleteProcessInstanceByIdsUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/batch-delete"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceIds", processInstanceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchExportByCodes
   * BATCH_EXPORT_PROCESS_DEFINITION_BY_CODES_NOTES
   * @param codes 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @throws ApiException if fails to make API call
   */
  public void batchExportProcessDefinitionByCodesUsingPOST(String codes, Long projectCode) throws ApiException {
    batchExportProcessDefinitionByCodesUsingPOSTWithHttpInfo(codes, projectCode);
  }

  /**
   * batchExportByCodes
   * BATCH_EXPORT_PROCESS_DEFINITION_BY_CODES_NOTES
   * @param codes 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> batchExportProcessDefinitionByCodesUsingPOSTWithHttpInfo(String codes, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchExportProcessDefinitionByCodesUsingPOSTRequestBuilder(codes, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchExportProcessDefinitionByCodesUsingPOST", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchExportProcessDefinitionByCodesUsingPOSTRequestBuilder(String codes, Long projectCode) throws ApiException {
    // verify the required parameter 'codes' is set
    if (codes == null) {
      throw new ApiException(400, "Missing the required parameter 'codes' when calling batchExportProcessDefinitionByCodesUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling batchExportProcessDefinitionByCodesUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/batch-export"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codes", codes));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * connectDataSource
   * 连接数据源
   * @param dataSourceParam 数据源参数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result connectDataSourceUsingPOST(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    ApiResponse<Result> localVarResponse = connectDataSourceUsingPOSTWithHttpInfo(dataSourceParam);
    return localVarResponse.getData();
  }

  /**
   * connectDataSource
   * 连接数据源
   * @param dataSourceParam 数据源参数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> connectDataSourceUsingPOSTWithHttpInfo(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = connectDataSourceUsingPOSTRequestBuilder(dataSourceParam);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("connectDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder connectDataSourceUsingPOSTRequestBuilder(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    // verify the required parameter 'dataSourceParam' is set
    if (dataSourceParam == null) {
      throw new ApiException(400, "Missing the required parameter 'dataSourceParam' when calling connectDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/connect";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dataSourceParam);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * connectionTest
   * 连接数据源测试
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result connectionTestUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = connectionTestUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * connectionTest
   * 连接数据源测试
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> connectionTestUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = connectionTestUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("connectionTestUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder connectionTestUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling connectionTestUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/{id}/connect-test"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchCopyByCodes
   * 复制工作流定义
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @param targetProjectCode TARGET_PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result copyProcessDefinitionUsingPOST(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = copyProcessDefinitionUsingPOSTWithHttpInfo(codes, projectCode, targetProjectCode);
    return localVarResponse.getData();
  }

  /**
   * batchCopyByCodes
   * 复制工作流定义
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @param targetProjectCode TARGET_PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> copyProcessDefinitionUsingPOSTWithHttpInfo(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = copyProcessDefinitionUsingPOSTRequestBuilder(codes, projectCode, targetProjectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("copyProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder copyProcessDefinitionUsingPOSTRequestBuilder(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    // verify the required parameter 'codes' is set
    if (codes == null) {
      throw new ApiException(400, "Missing the required parameter 'codes' when calling copyProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling copyProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'targetProjectCode' is set
    if (targetProjectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'targetProjectCode' when calling copyProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/batch-copy"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codes", codes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetProjectCode", targetProjectCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countCommandState
   * 统计命令状态
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countCommandStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = countCommandStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * countCommandState
   * 统计命令状态
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countCommandStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countCommandStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countCommandStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countCommandStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/command-state-count";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countDefinitionByUser
   * 统计用户创建的流程定义
   * @param projectCode PROJECT_CODE (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countDefinitionByUserUsingGET(Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = countDefinitionByUserUsingGETWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * countDefinitionByUser
   * 统计用户创建的流程定义
   * @param projectCode PROJECT_CODE (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countDefinitionByUserUsingGETWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countDefinitionByUserUsingGETRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countDefinitionByUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countDefinitionByUserUsingGETRequestBuilder(Long projectCode) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/define-user-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectCode", projectCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countProcessInstanceState
   * 统计流程实例状态
   * @param endDate 结束时间 (optional)
   * @param projectCode PROJECT_CODE (optional)
   * @param startDate 开始时间 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countProcessInstanceStateUsingGET(String endDate, Long projectCode, String startDate) throws ApiException {
    ApiResponse<Result> localVarResponse = countProcessInstanceStateUsingGETWithHttpInfo(endDate, projectCode, startDate);
    return localVarResponse.getData();
  }

  /**
   * countProcessInstanceState
   * 统计流程实例状态
   * @param endDate 结束时间 (optional)
   * @param projectCode PROJECT_CODE (optional)
   * @param startDate 开始时间 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countProcessInstanceStateUsingGETWithHttpInfo(String endDate, Long projectCode, String startDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countProcessInstanceStateUsingGETRequestBuilder(endDate, projectCode, startDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countProcessInstanceStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countProcessInstanceStateUsingGETRequestBuilder(String endDate, Long projectCode, String startDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/process-state-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectCode", projectCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countQueueState
   * 统计队列里任务状态
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countQueueStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = countQueueStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * countQueueState
   * 统计队列里任务状态
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countQueueStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countQueueStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countQueueStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countQueueStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/queue-count";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countTaskState
   * 任务状态统计
   * @param endDate 结束时间 (optional)
   * @param projectCode PROJECT_CODE (optional)
   * @param startDate 开始时间 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countTaskStateUsingGET(String endDate, Long projectCode, String startDate) throws ApiException {
    ApiResponse<Result> localVarResponse = countTaskStateUsingGETWithHttpInfo(endDate, projectCode, startDate);
    return localVarResponse.getData();
  }

  /**
   * countTaskState
   * 任务状态统计
   * @param endDate 结束时间 (optional)
   * @param projectCode PROJECT_CODE (optional)
   * @param startDate 开始时间 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countTaskStateUsingGETWithHttpInfo(String endDate, Long projectCode, String startDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countTaskStateUsingGETRequestBuilder(endDate, projectCode, startDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countTaskStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countTaskStateUsingGETRequestBuilder(String endDate, Long projectCode, String startDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/task-state-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectCode", projectCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createAlertPluginInstance
   * 创建告警插件实例
   * @param instanceName 告警插件实例名称 (required)
   * @param pluginDefineId 告警插件定义ID (required)
   * @param pluginInstanceParams 告警插件实例参数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createAlertPluginInstanceUsingPOST(String instanceName, Integer pluginDefineId, String pluginInstanceParams) throws ApiException {
    ApiResponse<Result> localVarResponse = createAlertPluginInstanceUsingPOSTWithHttpInfo(instanceName, pluginDefineId, pluginInstanceParams);
    return localVarResponse.getData();
  }

  /**
   * createAlertPluginInstance
   * 创建告警插件实例
   * @param instanceName 告警插件实例名称 (required)
   * @param pluginDefineId 告警插件定义ID (required)
   * @param pluginInstanceParams 告警插件实例参数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createAlertPluginInstanceUsingPOSTWithHttpInfo(String instanceName, Integer pluginDefineId, String pluginInstanceParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAlertPluginInstanceUsingPOSTRequestBuilder(instanceName, pluginDefineId, pluginInstanceParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createAlertPluginInstanceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAlertPluginInstanceUsingPOSTRequestBuilder(String instanceName, Integer pluginDefineId, String pluginInstanceParams) throws ApiException {
    // verify the required parameter 'instanceName' is set
    if (instanceName == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceName' when calling createAlertPluginInstanceUsingPOST");
    }
    // verify the required parameter 'pluginDefineId' is set
    if (pluginDefineId == null) {
      throw new ApiException(400, "Missing the required parameter 'pluginDefineId' when calling createAlertPluginInstanceUsingPOST");
    }
    // verify the required parameter 'pluginInstanceParams' is set
    if (pluginInstanceParams == null) {
      throw new ApiException(400, "Missing the required parameter 'pluginInstanceParams' when calling createAlertPluginInstanceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("instanceName", instanceName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pluginDefineId", pluginDefineId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pluginInstanceParams", pluginInstanceParams));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createAlertgroup
   * 创建告警组
   * @param alertInstanceIds alertInstanceIds (required)
   * @param groupName 组名称 (required)
   * @param description 备注(描述) (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createAlertgroupUsingPOST(String alertInstanceIds, String groupName, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createAlertgroupUsingPOSTWithHttpInfo(alertInstanceIds, groupName, description);
    return localVarResponse.getData();
  }

  /**
   * createAlertgroup
   * 创建告警组
   * @param alertInstanceIds alertInstanceIds (required)
   * @param groupName 组名称 (required)
   * @param description 备注(描述) (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createAlertgroupUsingPOSTWithHttpInfo(String alertInstanceIds, String groupName, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAlertgroupUsingPOSTRequestBuilder(alertInstanceIds, groupName, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createAlertgroupUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAlertgroupUsingPOSTRequestBuilder(String alertInstanceIds, String groupName, String description) throws ApiException {
    // verify the required parameter 'alertInstanceIds' is set
    if (alertInstanceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'alertInstanceIds' when calling createAlertgroupUsingPOST");
    }
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling createAlertgroupUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertInstanceIds", alertInstanceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createDataSource
   * 创建数据源
   * @param dataSourceParam 数据源参数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createDataSourceUsingPOST(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    ApiResponse<Result> localVarResponse = createDataSourceUsingPOSTWithHttpInfo(dataSourceParam);
    return localVarResponse.getData();
  }

  /**
   * createDataSource
   * 创建数据源
   * @param dataSourceParam 数据源参数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createDataSourceUsingPOSTWithHttpInfo(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDataSourceUsingPOSTRequestBuilder(dataSourceParam);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDataSourceUsingPOSTRequestBuilder(BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    // verify the required parameter 'dataSourceParam' is set
    if (dataSourceParam == null) {
      throw new ApiException(400, "Missing the required parameter 'dataSourceParam' when calling createDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dataSourceParam);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createDirctory
   * 创建资源
   * @param currentDir 当前资源目录 (required)
   * @param name 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createDirectoryUsingPOST(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createDirectoryUsingPOSTWithHttpInfo(currentDir, name, pid, type, description);
    return localVarResponse.getData();
  }

  /**
   * createDirctory
   * 创建资源
   * @param currentDir 当前资源目录 (required)
   * @param name 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createDirectoryUsingPOSTWithHttpInfo(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDirectoryUsingPOSTRequestBuilder(currentDir, name, pid, type, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createDirectoryUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDirectoryUsingPOSTRequestBuilder(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createDirectoryUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/directory";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createEmptyProcessDefinition
   * CREATE_EMPTY_PROCESS_NOTES
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param scheduleJson scheduleJson (optional)
   * @param timeout timeout (optional, default to 0)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createEmptyProcessDefinitionUsingPOST(String name, Long projectCode, String tenantCode, String description, String globalParams, String scheduleJson, Integer timeout) throws ApiException {
    ApiResponse<Result> localVarResponse = createEmptyProcessDefinitionUsingPOSTWithHttpInfo(name, projectCode, tenantCode, description, globalParams, scheduleJson, timeout);
    return localVarResponse.getData();
  }

  /**
   * createEmptyProcessDefinition
   * CREATE_EMPTY_PROCESS_NOTES
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param scheduleJson scheduleJson (optional)
   * @param timeout timeout (optional, default to 0)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createEmptyProcessDefinitionUsingPOSTWithHttpInfo(String name, Long projectCode, String tenantCode, String description, String globalParams, String scheduleJson, Integer timeout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createEmptyProcessDefinitionUsingPOSTRequestBuilder(name, projectCode, tenantCode, description, globalParams, scheduleJson, timeout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createEmptyProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createEmptyProcessDefinitionUsingPOSTRequestBuilder(String name, Long projectCode, String tenantCode, String description, String globalParams, String scheduleJson, Integer timeout) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createEmptyProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling createEmptyProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling createEmptyProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/empty"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("globalParams", globalParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleJson", scheduleJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createProcessDefinition
   * 创建流程定义
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson taskDefinitionJson (required)
   * @param taskRelationJson taskRelationJson (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param timeout timeout (optional, default to 0)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createProcessDefinitionUsingPOST(String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Integer timeout) throws ApiException {
    ApiResponse<Result> localVarResponse = createProcessDefinitionUsingPOSTWithHttpInfo(locations, name, projectCode, taskDefinitionJson, taskRelationJson, tenantCode, description, globalParams, timeout);
    return localVarResponse.getData();
  }

  /**
   * createProcessDefinition
   * 创建流程定义
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson taskDefinitionJson (required)
   * @param taskRelationJson taskRelationJson (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param timeout timeout (optional, default to 0)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createProcessDefinitionUsingPOSTWithHttpInfo(String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Integer timeout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProcessDefinitionUsingPOSTRequestBuilder(locations, name, projectCode, taskDefinitionJson, taskRelationJson, tenantCode, description, globalParams, timeout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProcessDefinitionUsingPOSTRequestBuilder(String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Integer timeout) throws ApiException {
    // verify the required parameter 'locations' is set
    if (locations == null) {
      throw new ApiException(400, "Missing the required parameter 'locations' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'taskDefinitionJson' is set
    if (taskDefinitionJson == null) {
      throw new ApiException(400, "Missing the required parameter 'taskDefinitionJson' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'taskRelationJson' is set
    if (taskRelationJson == null) {
      throw new ApiException(400, "Missing the required parameter 'taskRelationJson' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling createProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("globalParams", globalParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDefinitionJson", taskDefinitionJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskRelationJson", taskRelationJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * create
   * 创建项目
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createProjectUsingPOST1(String description, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = createProjectUsingPOST1WithHttpInfo(description, projectName);
    return localVarResponse.getData();
  }

  /**
   * create
   * 创建项目
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createProjectUsingPOST1WithHttpInfo(String description, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProjectUsingPOST1RequestBuilder(description, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createProjectUsingPOST1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProjectUsingPOST1RequestBuilder(String description, String projectName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectName", projectName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createQueue
   * 创建队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createQueueUsingPOST(String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = createQueueUsingPOSTWithHttpInfo(queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * createQueue
   * 创建队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createQueueUsingPOSTWithHttpInfo(String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createQueueUsingPOSTRequestBuilder(queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createQueueUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createQueueUsingPOSTRequestBuilder(String queue, String queueName) throws ApiException {
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling createQueueUsingPOST");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling createQueueUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queues";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createResource
   * 创建资源
   * @param currentDir 当前资源目录 (required)
   * @param name 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createResourceUsingPOST(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createResourceUsingPOSTWithHttpInfo(currentDir, name, pid, type, file, description);
    return localVarResponse.getData();
  }

  /**
   * createResource
   * 创建资源
   * @param currentDir 当前资源目录 (required)
   * @param name 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createResourceUsingPOSTWithHttpInfo(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createResourceUsingPOSTRequestBuilder(currentDir, name, pid, type, file, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createResourceUsingPOSTRequestBuilder(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling createResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createSchedule
   * 创建定时
   * @param processDefinitionCode 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createScheduleUsingPOST(Long processDefinitionCode, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = createScheduleUsingPOSTWithHttpInfo(processDefinitionCode, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * createSchedule
   * 创建定时
   * @param processDefinitionCode 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createScheduleUsingPOSTWithHttpInfo(Long processDefinitionCode, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createScheduleUsingPOSTRequestBuilder(processDefinitionCode, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createScheduleUsingPOSTRequestBuilder(Long processDefinitionCode, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    // verify the required parameter 'processDefinitionCode' is set
    if (processDefinitionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionCode' when calling createScheduleUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling createScheduleUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("environmentCode", environmentCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionCode", processDefinitionCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createTenant
   * 创建租户
   * @param queueId 队列ID (required)
   * @param tenantCode 操作系统租户 (required)
   * @param description 租户描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createTenantUsingPOST(Integer queueId, String tenantCode, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createTenantUsingPOSTWithHttpInfo(queueId, tenantCode, description);
    return localVarResponse.getData();
  }

  /**
   * createTenant
   * 创建租户
   * @param queueId 队列ID (required)
   * @param tenantCode 操作系统租户 (required)
   * @param description 租户描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createTenantUsingPOSTWithHttpInfo(Integer queueId, String tenantCode, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTenantUsingPOSTRequestBuilder(queueId, tenantCode, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createTenantUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTenantUsingPOSTRequestBuilder(Integer queueId, String tenantCode, String description) throws ApiException {
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling createTenantUsingPOST");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling createTenantUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueId", queueId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createUdfFunc
   * 创建UDF函数
   * @param className 包名类名 (required)
   * @param funcName 函数名称 (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createUdfFuncUsingPOST(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createUdfFuncUsingPOSTWithHttpInfo(className, funcName, resourceId, type, argTypes, database, description);
    return localVarResponse.getData();
  }

  /**
   * createUdfFunc
   * 创建UDF函数
   * @param className 包名类名 (required)
   * @param funcName 函数名称 (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createUdfFuncUsingPOSTWithHttpInfo(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUdfFuncUsingPOSTRequestBuilder(className, funcName, resourceId, type, argTypes, database, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createUdfFuncUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUdfFuncUsingPOSTRequestBuilder(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    // verify the required parameter 'className' is set
    if (className == null) {
      throw new ApiException(400, "Missing the required parameter 'className' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'funcName' is set
    if (funcName == null) {
      throw new ApiException(400, "Missing the required parameter 'funcName' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceId' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createUdfFuncUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{resourceId}/udf-func"
        .replace("{resourceId}", ApiClient.urlEncode(resourceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("argTypes", argTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("className", className));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("funcName", funcName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createUser
   * 创建用户
   * @param email 邮箱 (required)
   * @param tenantId 租户ID (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param state 状态 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createUserUsingPOST(String email, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    ApiResponse<Result> localVarResponse = createUserUsingPOSTWithHttpInfo(email, tenantId, userName, userPassword, phone, queue, state);
    return localVarResponse.getData();
  }

  /**
   * createUser
   * 创建用户
   * @param email 邮箱 (required)
   * @param tenantId 租户ID (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param state 状态 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createUserUsingPOSTWithHttpInfo(String email, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserUsingPOSTRequestBuilder(email, tenantId, userName, userPassword, phone, queue, state);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserUsingPOSTRequestBuilder(String email, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling createUserUsingPOST");
    }
    // verify the required parameter 'tenantId' is set
    if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling createUserUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling createUserUsingPOST");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling createUserUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delAlertgroupById
   * 通过ID删除告警组
   * @param id 报警组ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result delAlertgroupByIdUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = delAlertgroupByIdUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * delAlertgroupById
   * 通过ID删除告警组
   * @param id 报警组ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> delAlertgroupByIdUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = delAlertgroupByIdUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("delAlertgroupByIdUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder delAlertgroupByIdUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delAlertgroupByIdUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delUserById
   * 删除用户通过ID
   * @param id 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result delUserByIdUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = delUserByIdUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * delUserById
   * 删除用户通过ID
   * @param id 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> delUserByIdUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = delUserByIdUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("delUserByIdUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder delUserByIdUsingPOSTRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delUserByIdUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteAlertPluginInstance
   * 删除告警插件实例
   * @param id 告警插件ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteAlertPluginInstanceUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteAlertPluginInstanceUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteAlertPluginInstance
   * 删除告警插件实例
   * @param id 告警插件ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteAlertPluginInstanceUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAlertPluginInstanceUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteAlertPluginInstanceUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAlertPluginInstanceUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAlertPluginInstanceUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteByCode
   * 通过流程定义ID删除流程定义
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProcessDefinitionByCodeUsingDELETE(Integer code, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProcessDefinitionByCodeUsingDELETEWithHttpInfo(code, projectCode);
    return localVarResponse.getData();
  }

  /**
   * deleteByCode
   * 通过流程定义ID删除流程定义
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProcessDefinitionByCodeUsingDELETEWithHttpInfo(Integer code, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProcessDefinitionByCodeUsingDELETERequestBuilder(code, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProcessDefinitionByCodeUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProcessDefinitionByCodeUsingDELETERequestBuilder(Integer code, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling deleteProcessDefinitionByCodeUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteProcessDefinitionByCodeUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteVersion
   * 删除流程历史版本
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProcessDefinitionVersionUsingDELETE(Long code, Long projectCode, Integer version) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProcessDefinitionVersionUsingDELETEWithHttpInfo(code, projectCode, version);
    return localVarResponse.getData();
  }

  /**
   * deleteVersion
   * 删除流程历史版本
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProcessDefinitionVersionUsingDELETEWithHttpInfo(Long code, Long projectCode, Integer version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProcessDefinitionVersionUsingDELETERequestBuilder(code, projectCode, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProcessDefinitionVersionUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProcessDefinitionVersionUsingDELETERequestBuilder(Long code, Long projectCode, Integer version) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling deleteProcessDefinitionVersionUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteProcessDefinitionVersionUsingDELETE");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling deleteProcessDefinitionVersionUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/versions/{version}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteProcessInstanceById
   * 通过流程实例ID删除流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ResultProcessInstance
   * @throws ApiException if fails to make API call
   */
  public ResultProcessInstance deleteProcessInstanceByIdUsingDELETE(Integer id, Long projectCode) throws ApiException {
    ApiResponse<ResultProcessInstance> localVarResponse = deleteProcessInstanceByIdUsingDELETEWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * deleteProcessInstanceById
   * 通过流程实例ID删除流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;ResultProcessInstance&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultProcessInstance> deleteProcessInstanceByIdUsingDELETEWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProcessInstanceByIdUsingDELETERequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProcessInstanceByIdUsingDELETE", localVarResponse);
      }
      return new ApiResponse<ResultProcessInstance>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultProcessInstance>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProcessInstanceByIdUsingDELETERequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteProcessInstanceByIdUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteProcessInstanceByIdUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delete
   * 通过ID删除项目
   * @param code PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProjectUsingDELETE(Long code) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProjectUsingDELETEWithHttpInfo(code);
    return localVarResponse.getData();
  }

  /**
   * delete
   * 通过ID删除项目
   * @param code PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProjectUsingDELETEWithHttpInfo(Long code) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProjectUsingDELETERequestBuilder(code);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProjectUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProjectUsingDELETERequestBuilder(Long code) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling deleteProjectUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteResource
   * 通过ID删除资源
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteResourceUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteResourceUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteResource
   * 通过ID删除资源
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteResourceUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteResourceUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteResourceUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteResourceUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteResourceUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteScheduleById
   * 定时下线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteScheduleByIdUsingDELETE(Integer id, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteScheduleByIdUsingDELETEWithHttpInfo(id, projectCode, alertGroup, createTime, email, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * deleteScheduleById
   * 定时下线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteScheduleByIdUsingDELETEWithHttpInfo(Integer id, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteScheduleByIdUsingDELETERequestBuilder(id, projectCode, alertGroup, createTime, email, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteScheduleByIdUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteScheduleByIdUsingDELETERequestBuilder(Integer id, Long projectCode, String alertGroup, OffsetDateTime createTime, String email, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteScheduleByIdUsingDELETE");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling deleteScheduleByIdUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/{id}"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteTenantById
   * 删除租户
   * @param id 租户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteTenantByIdUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteTenantByIdUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteTenantById
   * 删除租户
   * @param id 租户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteTenantByIdUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTenantByIdUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteTenantByIdUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTenantByIdUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteTenantByIdUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteUdfFunc
   * 删除UDF函数
   * @param id UDF_FUNC_ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteUdfFuncUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteUdfFuncUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteUdfFunc
   * 删除UDF函数
   * @param id UDF_FUNC_ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteUdfFuncUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUdfFuncUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteUdfFuncUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUdfFuncUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUdfFuncUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteDataSource
   * 删除数据源
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteUsingDELETE(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteUsingDELETEWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteDataSource
   * 删除数据源
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteUsingDELETEWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUsingDELETERequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteUsingDELETE", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUsingDELETERequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * downloadResource
   * 下载资源文件
   * @param id 资源ID (required)
   * @return ResponseEntity
   * @throws ApiException if fails to make API call
   */
  public ResponseEntity downloadResourceUsingGET(Integer id) throws ApiException {
    ApiResponse<ResponseEntity> localVarResponse = downloadResourceUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * downloadResource
   * 下载资源文件
   * @param id 资源ID (required)
   * @return ApiResponse&lt;ResponseEntity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResponseEntity> downloadResourceUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadResourceUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("downloadResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<ResponseEntity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseEntity>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadResourceUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling downloadResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}/download"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * downloadTaskLog
   * 下载任务实例日志
   * @param taskInstanceId 任务实例ID (required)
   * @return ResponseEntity
   * @throws ApiException if fails to make API call
   */
  public ResponseEntity downloadTaskLogUsingGET(Integer taskInstanceId) throws ApiException {
    ApiResponse<ResponseEntity> localVarResponse = downloadTaskLogUsingGETWithHttpInfo(taskInstanceId);
    return localVarResponse.getData();
  }

  /**
   * downloadTaskLog
   * 下载任务实例日志
   * @param taskInstanceId 任务实例ID (required)
   * @return ApiResponse&lt;ResponseEntity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResponseEntity> downloadTaskLogUsingGETWithHttpInfo(Integer taskInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadTaskLogUsingGETRequestBuilder(taskInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("downloadTaskLogUsingGET", localVarResponse);
      }
      return new ApiResponse<ResponseEntity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseEntity>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadTaskLogUsingGETRequestBuilder(Integer taskInstanceId) throws ApiException {
    // verify the required parameter 'taskInstanceId' is set
    if (taskInstanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskInstanceId' when calling downloadTaskLogUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/log/download-log";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskInstanceId", taskInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * execute
   * 执行流程实例的各种操作(暂停、停止、重跑、恢复等)
   * @param executeType 执行类型 (required)
   * @param processInstanceId 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result executeUsingPOST(Object executeType, Integer processInstanceId, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = executeUsingPOSTWithHttpInfo(executeType, processInstanceId, projectCode);
    return localVarResponse.getData();
  }

  /**
   * execute
   * 执行流程实例的各种操作(暂停、停止、重跑、恢复等)
   * @param executeType 执行类型 (required)
   * @param processInstanceId 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> executeUsingPOSTWithHttpInfo(Object executeType, Integer processInstanceId, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeUsingPOSTRequestBuilder(executeType, processInstanceId, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("executeUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeUsingPOSTRequestBuilder(Object executeType, Integer processInstanceId, Long projectCode) throws ApiException {
    // verify the required parameter 'executeType' is set
    if (executeType == null) {
      throw new ApiException(400, "Missing the required parameter 'executeType' when calling executeUsingPOST");
    }
    // verify the required parameter 'processInstanceId' is set
    if (processInstanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstanceId' when calling executeUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling executeUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/executors/execute"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executeType", executeType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * force-success
   * 强制TASK成功
   * @param id 任务实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject forceTaskSuccessUsingPOST(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = forceTaskSuccessUsingPOSTWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * force-success
   * 强制TASK成功
   * @param id 任务实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> forceTaskSuccessUsingPOSTWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = forceTaskSuccessUsingPOSTRequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("forceTaskSuccessUsingPOST", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder forceTaskSuccessUsingPOSTRequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling forceTaskSuccessUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling forceTaskSuccessUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-instances/{id}/force-success"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAlertPluginInstanceList
   * 查询所有告警实例列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getAlertPluginInstanceUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = getAlertPluginInstanceUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryAlertPluginInstanceList
   * 查询所有告警实例列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getAlertPluginInstanceUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAlertPluginInstanceUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getAlertPluginInstanceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAlertPluginInstanceUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getAlertPluginInstance
   * 查询告警插件实例
   * @param id id (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getAlertPluginInstanceUsingGET1(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = getAlertPluginInstanceUsingGET1WithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * getAlertPluginInstance
   * 查询告警插件实例
   * @param id id (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getAlertPluginInstanceUsingGET1WithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAlertPluginInstanceUsingGET1RequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getAlertPluginInstanceUsingGET1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAlertPluginInstanceUsingGET1RequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAlertPluginInstanceUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getKerberosStartupState
   * 获取用户信息
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getKerberosStartupStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = getKerberosStartupStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * getKerberosStartupState
   * 获取用户信息
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getKerberosStartupStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getKerberosStartupStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getKerberosStartupStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getKerberosStartupStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/kerberos-startup-state";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getTasksByDefinitionCode
   * GET_TASK_LIST_BY_DEFINITION_CODE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getNodeListByDefinitionCodeUsingGET(Long code, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = getNodeListByDefinitionCodeUsingGETWithHttpInfo(code, projectCode);
    return localVarResponse.getData();
  }

  /**
   * getTasksByDefinitionCode
   * GET_TASK_LIST_BY_DEFINITION_CODE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getNodeListByDefinitionCodeUsingGETWithHttpInfo(Long code, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNodeListByDefinitionCodeUsingGETRequestBuilder(code, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNodeListByDefinitionCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNodeListByDefinitionCodeUsingGETRequestBuilder(Long code, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling getNodeListByDefinitionCodeUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling getNodeListByDefinitionCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/tasks"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getTaskListByDefinitionCodes
   * GET_TASK_LIST_BY_DEFINITION_CODE_NOTES
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getNodeListMapByDefinitionCodesUsingGET(String codes, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = getNodeListMapByDefinitionCodesUsingGETWithHttpInfo(codes, projectCode);
    return localVarResponse.getData();
  }

  /**
   * getTaskListByDefinitionCodes
   * GET_TASK_LIST_BY_DEFINITION_CODE_NOTES
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getNodeListMapByDefinitionCodesUsingGETWithHttpInfo(String codes, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNodeListMapByDefinitionCodesUsingGETRequestBuilder(codes, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNodeListMapByDefinitionCodesUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNodeListMapByDefinitionCodesUsingGETRequestBuilder(String codes, Long projectCode) throws ApiException {
    // verify the required parameter 'codes' is set
    if (codes == null) {
      throw new ApiException(400, "Missing the required parameter 'codes' when calling getNodeListMapByDefinitionCodesUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling getNodeListMapByDefinitionCodesUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/batch-query-tasks"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codes", codes));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getUserInfo
   * 获取用户信息
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getUserInfoUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = getUserInfoUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * getUserInfo
   * 获取用户信息
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getUserInfoUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserInfoUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getUserInfoUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserInfoUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/get-user-info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantDataSource
   * 授权数据源
   * @param datasourceIds 数据源ID列表(字符串格式，多个数据源ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantDataSourceUsingPOST(String datasourceIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantDataSourceUsingPOSTWithHttpInfo(datasourceIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantDataSource
   * 授权数据源
   * @param datasourceIds 数据源ID列表(字符串格式，多个数据源ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantDataSourceUsingPOSTWithHttpInfo(String datasourceIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantDataSourceUsingPOSTRequestBuilder(datasourceIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantDataSourceUsingPOSTRequestBuilder(String datasourceIds, Integer userId) throws ApiException {
    // verify the required parameter 'datasourceIds' is set
    if (datasourceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'datasourceIds' when calling grantDataSourceUsingPOST");
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling grantDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("datasourceIds", datasourceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantProject
   * 授权项目
   * @param projectIds 项目IDS(字符串格式，多个项目以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantProjectUsingPOST(String projectIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantProjectUsingPOSTWithHttpInfo(projectIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantProject
   * 授权项目
   * @param projectIds 项目IDS(字符串格式，多个项目以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantProjectUsingPOSTWithHttpInfo(String projectIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantProjectUsingPOSTRequestBuilder(projectIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantProjectUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantProjectUsingPOSTRequestBuilder(String projectIds, Integer userId) throws ApiException {
    // verify the required parameter 'projectIds' is set
    if (projectIds == null) {
      throw new ApiException(400, "Missing the required parameter 'projectIds' when calling grantProjectUsingPOST");
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling grantProjectUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectIds", projectIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantResource
   * 授权资源文件
   * @param resourceIds 资源ID列表(字符串格式，多个资源ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantResourceUsingPOST(String resourceIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantResourceUsingPOSTWithHttpInfo(resourceIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantResource
   * 授权资源文件
   * @param resourceIds 资源ID列表(字符串格式，多个资源ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantResourceUsingPOSTWithHttpInfo(String resourceIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantResourceUsingPOSTRequestBuilder(resourceIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantResourceUsingPOSTRequestBuilder(String resourceIds, Integer userId) throws ApiException {
    // verify the required parameter 'resourceIds' is set
    if (resourceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceIds' when calling grantResourceUsingPOST");
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling grantResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-file";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resourceIds", resourceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantUDFFunc
   * 授权udf函数
   * @param udfIds udf函数id列表(字符串格式，多个udf函数ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantUDFFuncUsingPOST(String udfIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantUDFFuncUsingPOSTWithHttpInfo(udfIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantUDFFunc
   * 授权udf函数
   * @param udfIds udf函数id列表(字符串格式，多个udf函数ID以\&quot;,\&quot;分割) (required)
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantUDFFuncUsingPOSTWithHttpInfo(String udfIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantUDFFuncUsingPOSTRequestBuilder(udfIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantUDFFuncUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantUDFFuncUsingPOSTRequestBuilder(String udfIds, Integer userId) throws ApiException {
    // verify the required parameter 'udfIds' is set
    if (udfIds == null) {
      throw new ApiException(400, "Missing the required parameter 'udfIds' when calling grantUDFFuncUsingPOST");
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling grantUDFFuncUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("udfIds", udfIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * importProcessDefinition
   * 导入流程定义
   * @param projectCode PROJECT_CODE (required)
   * @param file 资源文件 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result importProcessDefinitionUsingPOST(Long projectCode, Object file) throws ApiException {
    ApiResponse<Result> localVarResponse = importProcessDefinitionUsingPOSTWithHttpInfo(projectCode, file);
    return localVarResponse.getData();
  }

  /**
   * importProcessDefinition
   * 导入流程定义
   * @param projectCode PROJECT_CODE (required)
   * @param file 资源文件 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> importProcessDefinitionUsingPOSTWithHttpInfo(Long projectCode, Object file) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = importProcessDefinitionUsingPOSTRequestBuilder(projectCode, file);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("importProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder importProcessDefinitionUsingPOSTRequestBuilder(Long projectCode, Object file) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling importProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling importProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/import"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listAll
   * 
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listAllUsingGET(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = listAllUsingGETWithHttpInfo(alertGroup, createTime, email, id, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * listAll
   * 
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param state  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listAllUsingGETWithHttpInfo(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAllUsingGETRequestBuilder(alertGroup, createTime, email, id, phone, queue, queueName, state, tenantCode, tenantId, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listAllUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAllUsingGETRequestBuilder(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, Integer state, String tenantCode, Integer tenantId, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list-all";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listMaster
   * master服务列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listMasterUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listMasterUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listMaster
   * master服务列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listMasterUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listMasterUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listMasterUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listMasterUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/masters";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAlertGroupListPaging
   * 分页查询告警组列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = listPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryAlertGroupListPaging
   * 分页查询告警组列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling listPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling listPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAlertPluginInstanceListPaging
   * 分页查询告警实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listPagingUsingGET1(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = listPagingUsingGET1WithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryAlertPluginInstanceListPaging
   * 分页查询告警实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listPagingUsingGET1WithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listPagingUsingGET1RequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listPagingUsingGET1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listPagingUsingGET1RequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling listPagingUsingGET1");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling listPagingUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listUser
   * 用户列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listUserUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listUserUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listUser
   * 用户列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listUserUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listAlertgroupById
   * 告警组列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listAlertgroupById
   * 告警组列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listWorker
   * worker服务列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listWorkerUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listWorkerUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listWorker
   * worker服务列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listWorkerUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listWorkerUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listWorkerUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listWorkerUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/workers";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * login
   * 用户登录
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result loginUsingPOST(String userName, String userPassword) throws ApiException {
    ApiResponse<Result> localVarResponse = loginUsingPOSTWithHttpInfo(userName, userPassword);
    return localVarResponse.getData();
  }

  /**
   * login
   * 用户登录
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> loginUsingPOSTWithHttpInfo(String userName, String userPassword) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = loginUsingPOSTRequestBuilder(userName, userPassword);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("loginUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder loginUsingPOSTRequestBuilder(String userName, String userPassword) throws ApiException {
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling loginUsingPOST");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling loginUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/login";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchMoveByCodes
   * 移动工作流定义
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @param targetProjectCode TARGET_PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result moveProcessDefinitionUsingPOST(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = moveProcessDefinitionUsingPOSTWithHttpInfo(codes, projectCode, targetProjectCode);
    return localVarResponse.getData();
  }

  /**
   * batchMoveByCodes
   * 移动工作流定义
   * @param codes PROCESS_DEFINITION_CODES (required)
   * @param projectCode PROJECT_CODE (required)
   * @param targetProjectCode TARGET_PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> moveProcessDefinitionUsingPOSTWithHttpInfo(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveProcessDefinitionUsingPOSTRequestBuilder(codes, projectCode, targetProjectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("moveProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveProcessDefinitionUsingPOSTRequestBuilder(String codes, Long projectCode, Long targetProjectCode) throws ApiException {
    // verify the required parameter 'codes' is set
    if (codes == null) {
      throw new ApiException(400, "Missing the required parameter 'codes' when calling moveProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling moveProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'targetProjectCode' is set
    if (targetProjectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'targetProjectCode' when calling moveProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/batch-move"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("codes", codes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetProjectCode", targetProjectCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * offline
   * 定时下线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result offlineUsingPOST(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = offlineUsingPOSTWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * offline
   * 定时下线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> offlineUsingPOSTWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = offlineUsingPOSTRequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("offlineUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder offlineUsingPOSTRequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling offlineUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling offlineUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/{id}/offline"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * onlineCreateResource
   * 在线创建资源
   * @param content 资源文件内容 (required)
   * @param currentDir 当前资源目录 (required)
   * @param fileName 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param suffix 资源文件后缀 (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result onlineCreateResourceUsingPOST(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = onlineCreateResourceUsingPOSTWithHttpInfo(content, currentDir, fileName, pid, suffix, type, description);
    return localVarResponse.getData();
  }

  /**
   * onlineCreateResource
   * 在线创建资源
   * @param content 资源文件内容 (required)
   * @param currentDir 当前资源目录 (required)
   * @param fileName 资源文件名称 (required)
   * @param pid 资源父目录ID (required)
   * @param suffix 资源文件后缀 (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> onlineCreateResourceUsingPOSTWithHttpInfo(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onlineCreateResourceUsingPOSTRequestBuilder(content, currentDir, fileName, pid, suffix, type, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("onlineCreateResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onlineCreateResourceUsingPOSTRequestBuilder(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    // verify the required parameter 'content' is set
    if (content == null) {
      throw new ApiException(400, "Missing the required parameter 'content' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'suffix' is set
    if (suffix == null) {
      throw new ApiException(400, "Missing the required parameter 'suffix' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling onlineCreateResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/online-create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fileName", fileName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("suffix", suffix));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * online
   * 定时上线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result onlineUsingPOST(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = onlineUsingPOSTWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * online
   * 定时上线
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> onlineUsingPOSTWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onlineUsingPOSTRequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("onlineUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onlineUsingPOSTRequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling onlineUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling onlineUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/{id}/online"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * previewSchedule
   * 定时调度预览
   * @param schedule 定时 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result previewScheduleUsingPOST(String schedule) throws ApiException {
    ApiResponse<Result> localVarResponse = previewScheduleUsingPOSTWithHttpInfo(schedule);
    return localVarResponse.getData();
  }

  /**
   * previewSchedule
   * 定时调度预览
   * @param schedule 定时 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> previewScheduleUsingPOSTWithHttpInfo(String schedule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = previewScheduleUsingPOSTRequestBuilder(schedule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("previewScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder previewScheduleUsingPOSTRequestBuilder(String schedule) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/preview";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAlertGroupById
   * QUERY_ALERT_GROUP_BY_ID_NOTES
   * @param id 报警组ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAlertGroupByIdUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = queryAlertGroupByIdUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * queryAlertGroupById
   * QUERY_ALERT_GROUP_BY_ID_NOTES
   * @param id 报警组ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAlertGroupByIdUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAlertGroupByIdUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAlertGroupByIdUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAlertGroupByIdUsingPOSTRequestBuilder(Integer id) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups/query";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAllByProjectCode
   * QUERY_PROCESS_DEFINITION_All_BY_PROJECT_CODE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAllProcessDefinitionByProjectCodeUsingGET(Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryAllProcessDefinitionByProjectCodeUsingGETWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryAllByProjectCode
   * QUERY_PROCESS_DEFINITION_All_BY_PROJECT_CODE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAllProcessDefinitionByProjectCodeUsingGETWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAllProcessDefinitionByProjectCodeUsingGETRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAllProcessDefinitionByProjectCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAllProcessDefinitionByProjectCodeUsingGETRequestBuilder(Long projectCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryAllProcessDefinitionByProjectCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/all"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAllProjectList
   * 查询所有项目
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAllProjectListUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryAllProjectListUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryAllProjectList
   * 查询所有项目
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAllProjectListUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAllProjectListUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAllProjectListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAllProjectListUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAuthorizedProject
   * 查询授权项目
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAuthorizedProjectUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryAuthorizedProjectUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * queryAuthorizedProject
   * 查询授权项目
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAuthorizedProjectUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAuthorizedProjectUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAuthorizedProjectUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAuthorizedProjectUsingGETRequestBuilder(Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/authed-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSourceListPaging
   * 分页查询数据源列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryDataSourceListPaging
   * 分页查询数据源列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryDataSourceListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryDataSourceListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSourceList
   * 通过数据源类型查询数据源列表
   * @param type 数据源类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceListUsingGET(Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryDataSourceList
   * 通过数据源类型查询数据源列表
   * @param type 数据源类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryDataSourceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSource
   * 查询数据源通过ID
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * queryDataSource
   * 查询数据源通过ID
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryDataSourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDatabaseState
   * 查询数据库状态
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDatabaseStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryDatabaseStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryDatabaseState
   * 查询数据库状态
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDatabaseStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDatabaseStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDatabaseStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDatabaseStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/databases";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryList
   * 查询队列列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryListUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryListUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryList
   * 查询队列列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryListUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryListUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryListUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queues/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryLog
   * 查询任务实例日志
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @param taskInstanceId 任务实例ID (required)
   * @return Resultstring
   * @throws ApiException if fails to make API call
   */
  public Resultstring queryLogUsingGET(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {
    ApiResponse<Resultstring> localVarResponse = queryLogUsingGETWithHttpInfo(limit, skipLineNum, taskInstanceId);
    return localVarResponse.getData();
  }

  /**
   * queryLog
   * 查询任务实例日志
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @param taskInstanceId 任务实例ID (required)
   * @return ApiResponse&lt;Resultstring&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultstring> queryLogUsingGETWithHttpInfo(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryLogUsingGETRequestBuilder(limit, skipLineNum, taskInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryLogUsingGET", localVarResponse);
      }
      return new ApiResponse<Resultstring>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultstring>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryLogUsingGETRequestBuilder(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling queryLogUsingGET");
    }
    // verify the required parameter 'skipLineNum' is set
    if (skipLineNum == null) {
      throw new ApiException(400, "Missing the required parameter 'skipLineNum' when calling queryLogUsingGET");
    }
    // verify the required parameter 'taskInstanceId' is set
    if (taskInstanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskInstanceId' when calling queryLogUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/log/detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipLineNum", skipLineNum));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskInstanceId", taskInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryParentInstanceBySubId
   * 通过子流程实例ID查询父流程实例信息
   * @param projectCode PROJECT_CODE (required)
   * @param subId 子流程实例ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryParentInstanceBySubIdUsingGET(Long projectCode, Integer subId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryParentInstanceBySubIdUsingGETWithHttpInfo(projectCode, subId);
    return localVarResponse.getData();
  }

  /**
   * queryParentInstanceBySubId
   * 通过子流程实例ID查询父流程实例信息
   * @param projectCode PROJECT_CODE (required)
   * @param subId 子流程实例ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryParentInstanceBySubIdUsingGETWithHttpInfo(Long projectCode, Integer subId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryParentInstanceBySubIdUsingGETRequestBuilder(projectCode, subId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryParentInstanceBySubIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryParentInstanceBySubIdUsingGETRequestBuilder(Long projectCode, Integer subId) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryParentInstanceBySubIdUsingGET");
    }
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling queryParentInstanceBySubIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/query-parent-by-sub"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subId", subId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionByCode
   * QUERY_PROCESS_DEFINITION_BY_CODE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionByCodeUsingGET(Long code, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionByCodeUsingGETWithHttpInfo(code, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionByCode
   * QUERY_PROCESS_DEFINITION_BY_CODE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionByCodeUsingGETWithHttpInfo(Long code, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionByCodeUsingGETRequestBuilder(code, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionByCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionByCodeUsingGETRequestBuilder(Long code, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling queryProcessDefinitionByCodeUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionByCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionByName
   * 通过名称查询流程定义
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ResultProcessDefinition
   * @throws ApiException if fails to make API call
   */
  public ResultProcessDefinition queryProcessDefinitionByNameUsingGET(String name, Long projectCode) throws ApiException {
    ApiResponse<ResultProcessDefinition> localVarResponse = queryProcessDefinitionByNameUsingGETWithHttpInfo(name, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionByName
   * 通过名称查询流程定义
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;ResultProcessDefinition&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultProcessDefinition> queryProcessDefinitionByNameUsingGETWithHttpInfo(String name, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionByNameUsingGETRequestBuilder(name, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionByNameUsingGET", localVarResponse);
      }
      return new ApiResponse<ResultProcessDefinition>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultProcessDefinition>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionByNameUsingGETRequestBuilder(String name, Long projectCode) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling queryProcessDefinitionByNameUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionByNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/query-by-name"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryListPaging
   * 分页查询流程定义列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param searchVal 搜索值 (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionListPagingUsingGET(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionListPagingUsingGETWithHttpInfo(pageNo, pageSize, projectCode, searchVal, userId);
    return localVarResponse.getData();
  }

  /**
   * queryListPaging
   * 分页查询流程定义列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param searchVal 搜索值 (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionListPagingUsingGETRequestBuilder(pageNo, pageSize, projectCode, searchVal, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, Long projectCode, String searchVal, Integer userId) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProcessDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProcessDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryList
   * 查询流程定义列表
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionListUsingGET(Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionListUsingGETWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryList
   * 查询流程定义列表
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionListUsingGETWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionListUsingGETRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionListUsingGETRequestBuilder(Long projectCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/list"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * querySimpleList
   * QUERY_PROCESS_DEFINITION_SIMPLE_LIST_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionSimpleListUsingGET(Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionSimpleListUsingGETWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * querySimpleList
   * QUERY_PROCESS_DEFINITION_SIMPLE_LIST_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionSimpleListUsingGETWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionSimpleListUsingGETRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionSimpleListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionSimpleListUsingGETRequestBuilder(Long projectCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionSimpleListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/simple-list"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryVersions
   * 查询流程历史版本信息
   * @param code 流程定义编码 (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionVersionsUsingGET(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionVersionsUsingGETWithHttpInfo(code, pageNo, pageSize, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryVersions
   * 查询流程历史版本信息
   * @param code 流程定义编码 (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionVersionsUsingGETWithHttpInfo(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionVersionsUsingGETRequestBuilder(code, pageNo, pageSize, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionVersionsUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionVersionsUsingGETRequestBuilder(Long code, Integer pageNo, Integer pageSize, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling queryProcessDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProcessDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProcessDefinitionVersionsUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessDefinitionVersionsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/versions"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessInstanceById
   * 通过流程实例ID查询流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessInstanceByIdUsingGET(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessInstanceByIdUsingGETWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryProcessInstanceById
   * 通过流程实例ID查询流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessInstanceByIdUsingGETWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessInstanceByIdUsingGETRequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessInstanceByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessInstanceByIdUsingGETRequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryProcessInstanceByIdUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessInstanceByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessInstanceListPaging
   * 查询流程实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param endDate 结束时间 (optional)
   * @param executorName 流程名称 (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param processDefineCode processDefineCode (optional, default to 0)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessInstanceListUsingGET(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Long processDefineCode, String searchVal, String startDate, String stateType) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessInstanceListUsingGETWithHttpInfo(pageNo, pageSize, projectCode, endDate, executorName, host, processDefineCode, searchVal, startDate, stateType);
    return localVarResponse.getData();
  }

  /**
   * queryProcessInstanceListPaging
   * 查询流程实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param endDate 结束时间 (optional)
   * @param executorName 流程名称 (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param processDefineCode processDefineCode (optional, default to 0)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessInstanceListUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Long processDefineCode, String searchVal, String startDate, String stateType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessInstanceListUsingGETRequestBuilder(pageNo, pageSize, projectCode, endDate, executorName, host, processDefineCode, searchVal, startDate, stateType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessInstanceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessInstanceListUsingGETRequestBuilder(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Long processDefineCode, String searchVal, String startDate, String stateType) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProcessInstanceListUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProcessInstanceListUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryProcessInstanceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorName", executorName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefineCode", processDefineCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stateType", stateType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProjectByCode
   * 通过项目ID查询项目信息
   * @param code PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProjectByCodeUsingGET(Long code) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProjectByCodeUsingGETWithHttpInfo(code);
    return localVarResponse.getData();
  }

  /**
   * queryProjectByCode
   * 通过项目ID查询项目信息
   * @param code PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProjectByCodeUsingGETWithHttpInfo(Long code) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProjectByCodeUsingGETRequestBuilder(code);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProjectByCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProjectByCodeUsingGETRequestBuilder(Long code) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling queryProjectByCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProjectCreatedAndAuthorizedByUser
   * 查询授权和用户创建的项目
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProjectCreatedAndAuthorizedByUserUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryProjectCreatedAndAuthorizedByUserUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryProjectCreatedAndAuthorizedByUser
   * 查询授权和用户创建的项目
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProjectCreatedAndAuthorizedByUserUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProjectCreatedAndAuthorizedByUserUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProjectCreatedAndAuthorizedByUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProjectCreatedAndAuthorizedByUserUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/created-and-authed";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProjectListPaging
   * 分页查询项目列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProjectListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProjectListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryProjectListPaging
   * 分页查询项目列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProjectListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProjectListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProjectListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProjectListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProjectListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProjectListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryQueueListPaging
   * 分页查询队列列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryQueueListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryQueueListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryQueueListPaging
   * 分页查询队列列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryQueueListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryQueueListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryQueueListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryQueueListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryQueueListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryQueueListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queues";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceByProgramType
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @param programType programType (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceJarListUsingGET(Object type, String programType) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceJarListUsingGETWithHttpInfo(type, programType);
    return localVarResponse.getData();
  }

  /**
   * queryResourceByProgramType
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @param programType programType (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceJarListUsingGETWithHttpInfo(Object type, String programType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceJarListUsingGETRequestBuilder(type, programType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceJarListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceJarListUsingGETRequestBuilder(Object type, String programType) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceJarListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/query-by-type";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("programType", programType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceListPaging
   * 分页查询资源列表
   * @param id 资源ID (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param type 资源文件类型 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceListPagingUsingGET(Integer id, Integer pageNo, Integer pageSize, Object type, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceListPagingUsingGETWithHttpInfo(id, pageNo, pageSize, type, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryResourceListPaging
   * 分页查询资源列表
   * @param id 资源ID (required)
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param type 资源文件类型 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceListPagingUsingGETWithHttpInfo(Integer id, Integer pageNo, Integer pageSize, Object type, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceListPagingUsingGETRequestBuilder(id, pageNo, pageSize, type, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceListPagingUsingGETRequestBuilder(Integer id, Integer pageNo, Integer pageSize, Object type, String searchVal) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryResourceListPagingUsingGET");
    }
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryResourceListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryResourceListPagingUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceList
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceListUsingGET(Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryResourceList
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResource
   * 通过资源名称查询
   * @param fullName 资源全名 (required)
   * @param id 资源ID (required)
   * @param type 资源文件类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceUsingGET(String fullName, Integer id, Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceUsingGETWithHttpInfo(fullName, id, type);
    return localVarResponse.getData();
  }

  /**
   * queryResource
   * 通过资源名称查询
   * @param fullName 资源全名 (required)
   * @param id 资源ID (required)
   * @param type 资源文件类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceUsingGETWithHttpInfo(String fullName, Integer id, Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceUsingGETRequestBuilder(fullName, id, type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceUsingGETRequestBuilder(String fullName, Integer id, Object type) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling queryResourceUsingGET");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryResourceUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fullName", fullName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryScheduleListPaging
   * 分页查询定时
   * @param processDefinitionCode processDefinitionCode (required)
   * @param projectCode PROJECT_CODE (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryScheduleListPagingUsingGET(Long processDefinitionCode, Long projectCode, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryScheduleListPagingUsingGETWithHttpInfo(processDefinitionCode, projectCode, pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryScheduleListPaging
   * 分页查询定时
   * @param processDefinitionCode processDefinitionCode (required)
   * @param projectCode PROJECT_CODE (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryScheduleListPagingUsingGETWithHttpInfo(Long processDefinitionCode, Long projectCode, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryScheduleListPagingUsingGETRequestBuilder(processDefinitionCode, projectCode, pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryScheduleListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryScheduleListPagingUsingGETRequestBuilder(Long processDefinitionCode, Long projectCode, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'processDefinitionCode' is set
    if (processDefinitionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionCode' when calling queryScheduleListPagingUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryScheduleListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionCode", processDefinitionCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryScheduleList
   * 查询定时列表
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryScheduleListUsingPOST(Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryScheduleListUsingPOSTWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryScheduleList
   * 查询定时列表
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryScheduleListUsingPOSTWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryScheduleListUsingPOSTRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryScheduleListUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryScheduleListUsingPOSTRequestBuilder(Long projectCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryScheduleListUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/list"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * querySubProcessInstanceByTaskCode
   * QUERY_SUBPROCESS_INSTANCE_BY_TASK_CODE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param taskId taskId (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result querySubProcessInstanceByTaskIdUsingGET(Long projectCode, Integer taskId) throws ApiException {
    ApiResponse<Result> localVarResponse = querySubProcessInstanceByTaskIdUsingGETWithHttpInfo(projectCode, taskId);
    return localVarResponse.getData();
  }

  /**
   * querySubProcessInstanceByTaskCode
   * QUERY_SUBPROCESS_INSTANCE_BY_TASK_CODE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param taskId taskId (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> querySubProcessInstanceByTaskIdUsingGETWithHttpInfo(Long projectCode, Integer taskId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = querySubProcessInstanceByTaskIdUsingGETRequestBuilder(projectCode, taskId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("querySubProcessInstanceByTaskIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder querySubProcessInstanceByTaskIdUsingGETRequestBuilder(Long projectCode, Integer taskId) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling querySubProcessInstanceByTaskIdUsingGET");
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling querySubProcessInstanceByTaskIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/query-sub-by-parent"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskId", taskId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskListByProcessId
   * 通过流程实例ID查询任务列表
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskListByProcessIdUsingGET(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskListByProcessIdUsingGETWithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryTaskListByProcessId
   * 通过流程实例ID查询任务列表
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskListByProcessIdUsingGETWithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskListByProcessIdUsingGETRequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskListByProcessIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskListByProcessIdUsingGETRequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryTaskListByProcessIdUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTaskListByProcessIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}/tasks"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskListPaging
   * 分页查询任务实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param endDate 结束时间 (optional)
   * @param executorName 流程名称 (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param processInstanceName 流程实例名称 (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @param taskName 任务实例名 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskListPagingUsingGET(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Integer processInstanceId, String processInstanceName, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskListPagingUsingGETWithHttpInfo(pageNo, pageSize, projectCode, endDate, executorName, host, processInstanceId, processInstanceName, searchVal, startDate, stateType, taskName);
    return localVarResponse.getData();
  }

  /**
   * queryTaskListPaging
   * 分页查询任务实例列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param endDate 结束时间 (optional)
   * @param executorName 流程名称 (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param processInstanceName 流程实例名称 (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @param taskName 任务实例名 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Integer processInstanceId, String processInstanceName, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskListPagingUsingGETRequestBuilder(pageNo, pageSize, projectCode, endDate, executorName, host, processInstanceId, processInstanceName, searchVal, startDate, stateType, taskName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, Long projectCode, String endDate, String executorName, String host, Integer processInstanceId, String processInstanceName, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryTaskListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryTaskListPagingUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTaskListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/task-instances"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorName", executorName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceName", processInstanceName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stateType", stateType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskName", taskName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTenantlistPaging
   * 分页查询租户列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTenantlistPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTenantlistPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryTenantlistPaging
   * 分页查询租户列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTenantlistPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTenantlistPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTenantlistPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTenantlistPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryTenantlistPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryTenantlistPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTenantlist
   * 查询租户列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTenantlistUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryTenantlistUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryTenantlist
   * 查询租户列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTenantlistUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTenantlistUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTenantlistUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTenantlistUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTopNLongestRunningProcessInstance
   * 查询topN最长运行流程实例
   * @param endTime 流程实例结束时间 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param size 流程实例个数 (required)
   * @param startTime 流程实例启动时间 (required)
   * @return ResultProcessInstance
   * @throws ApiException if fails to make API call
   */
  public ResultProcessInstance queryTopNLongestRunningProcessInstanceUsingGET(String endTime, Long projectCode, Integer size, String startTime) throws ApiException {
    ApiResponse<ResultProcessInstance> localVarResponse = queryTopNLongestRunningProcessInstanceUsingGETWithHttpInfo(endTime, projectCode, size, startTime);
    return localVarResponse.getData();
  }

  /**
   * queryTopNLongestRunningProcessInstance
   * 查询topN最长运行流程实例
   * @param endTime 流程实例结束时间 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param size 流程实例个数 (required)
   * @param startTime 流程实例启动时间 (required)
   * @return ApiResponse&lt;ResultProcessInstance&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultProcessInstance> queryTopNLongestRunningProcessInstanceUsingGETWithHttpInfo(String endTime, Long projectCode, Integer size, String startTime) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTopNLongestRunningProcessInstanceUsingGETRequestBuilder(endTime, projectCode, size, startTime);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTopNLongestRunningProcessInstanceUsingGET", localVarResponse);
      }
      return new ApiResponse<ResultProcessInstance>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultProcessInstance>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTopNLongestRunningProcessInstanceUsingGETRequestBuilder(String endTime, Long projectCode, Integer size, String startTime) throws ApiException {
    // verify the required parameter 'endTime' is set
    if (endTime == null) {
      throw new ApiException(400, "Missing the required parameter 'endTime' when calling queryTopNLongestRunningProcessInstanceUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryTopNLongestRunningProcessInstanceUsingGET");
    }
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling queryTopNLongestRunningProcessInstanceUsingGET");
    }
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
      throw new ApiException(400, "Missing the required parameter 'startTime' when calling queryTopNLongestRunningProcessInstanceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/top-n"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTime", endTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTime", startTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUdfFuncListPaging
   * 分页查询udf函数列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject queryUdfFuncListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = queryUdfFuncListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryUdfFuncListPaging
   * 分页查询udf函数列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> queryUdfFuncListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUdfFuncListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUdfFuncListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUdfFuncListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryUdfFuncListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryUdfFuncListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUdfFuncList
   * 查询UDF函数列表
   * @param type UDF类型 (required)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject queryUdfFuncListUsingGET(Object type) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = queryUdfFuncListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryUdfFuncList
   * 查询UDF函数列表
   * @param type UDF类型 (required)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> queryUdfFuncListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUdfFuncListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUdfFuncListUsingGET", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUdfFuncListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryUdfFuncListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUnauthorizedProject
   * 查询未授权的项目
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUnauthorizedProjectUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUnauthorizedProjectUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * queryUnauthorizedProject
   * 查询未授权的项目
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUnauthorizedProjectUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUnauthorizedProjectUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUnauthorizedProjectUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUnauthorizedProjectUsingGETRequestBuilder(Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/unauth-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUserList
   * 查询用户列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUserListUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUserListUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryUserList
   * 查询用户列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUserListUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUserListUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUserListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUserListUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryUserListUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryUserListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryLineageByWorkFlowCode
   * QUERY_WORKFLOW_LINEAGE_BY_CODES_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param workFlowCode workFlowCode (required)
   * @return ResultMapstringobject
   * @throws ApiException if fails to make API call
   */
  public ResultMapstringobject queryWorkFlowLineageByCodeUsingGET(Long projectCode, Long workFlowCode) throws ApiException {
    ApiResponse<ResultMapstringobject> localVarResponse = queryWorkFlowLineageByCodeUsingGETWithHttpInfo(projectCode, workFlowCode);
    return localVarResponse.getData();
  }

  /**
   * queryLineageByWorkFlowCode
   * QUERY_WORKFLOW_LINEAGE_BY_CODES_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @param workFlowCode workFlowCode (required)
   * @return ApiResponse&lt;ResultMapstringobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultMapstringobject> queryWorkFlowLineageByCodeUsingGETWithHttpInfo(Long projectCode, Long workFlowCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryWorkFlowLineageByCodeUsingGETRequestBuilder(projectCode, workFlowCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryWorkFlowLineageByCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<ResultMapstringobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultMapstringobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryWorkFlowLineageByCodeUsingGETRequestBuilder(Long projectCode, Long workFlowCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryWorkFlowLineageByCodeUsingGET");
    }
    // verify the required parameter 'workFlowCode' is set
    if (workFlowCode == null) {
      throw new ApiException(400, "Missing the required parameter 'workFlowCode' when calling queryWorkFlowLineageByCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/lineages/{workFlowCode}"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()))
        .replace("{workFlowCode}", ApiClient.urlEncode(workFlowCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryLineageByWorkFlowName
   * 通过名称查询工作流血缘列表
   * @param projectCode PROJECT_CODE (required)
   * @param workFlowName workFlowName (optional)
   * @return ResultListWorkFlowLineage
   * @throws ApiException if fails to make API call
   */
  public ResultListWorkFlowLineage queryWorkFlowLineageByNameUsingGET(Long projectCode, String workFlowName) throws ApiException {
    ApiResponse<ResultListWorkFlowLineage> localVarResponse = queryWorkFlowLineageByNameUsingGETWithHttpInfo(projectCode, workFlowName);
    return localVarResponse.getData();
  }

  /**
   * queryLineageByWorkFlowName
   * 通过名称查询工作流血缘列表
   * @param projectCode PROJECT_CODE (required)
   * @param workFlowName workFlowName (optional)
   * @return ApiResponse&lt;ResultListWorkFlowLineage&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultListWorkFlowLineage> queryWorkFlowLineageByNameUsingGETWithHttpInfo(Long projectCode, String workFlowName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryWorkFlowLineageByNameUsingGETRequestBuilder(projectCode, workFlowName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryWorkFlowLineageByNameUsingGET", localVarResponse);
      }
      return new ApiResponse<ResultListWorkFlowLineage>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultListWorkFlowLineage>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryWorkFlowLineageByNameUsingGETRequestBuilder(Long projectCode, String workFlowName) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryWorkFlowLineageByNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/lineages/query-by-name"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workFlowName", workFlowName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryWorkFlowList
   * QUERY_WORKFLOW_LINEAGE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return ResultMapstringobject
   * @throws ApiException if fails to make API call
   */
  public ResultMapstringobject queryWorkFlowLineageUsingGET(Long projectCode) throws ApiException {
    ApiResponse<ResultMapstringobject> localVarResponse = queryWorkFlowLineageUsingGETWithHttpInfo(projectCode);
    return localVarResponse.getData();
  }

  /**
   * queryWorkFlowList
   * QUERY_WORKFLOW_LINEAGE_NOTES
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;ResultMapstringobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResultMapstringobject> queryWorkFlowLineageUsingGETWithHttpInfo(Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryWorkFlowLineageUsingGETRequestBuilder(projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryWorkFlowLineageUsingGET", localVarResponse);
      }
      return new ApiResponse<ResultMapstringobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResultMapstringobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryWorkFlowLineageUsingGETRequestBuilder(Long projectCode) throws ApiException {
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling queryWorkFlowLineageUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/lineages/list"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * registerUser
   * 用户注册
   * @param email 邮箱 (required)
   * @param repeatPassword 重复密码 (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return Resultobject
   * @throws ApiException if fails to make API call
   */
  public Resultobject registerUserUsingPOST(String email, String repeatPassword, String userName, String userPassword) throws ApiException {
    ApiResponse<Resultobject> localVarResponse = registerUserUsingPOSTWithHttpInfo(email, repeatPassword, userName, userPassword);
    return localVarResponse.getData();
  }

  /**
   * registerUser
   * 用户注册
   * @param email 邮箱 (required)
   * @param repeatPassword 重复密码 (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return ApiResponse&lt;Resultobject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Resultobject> registerUserUsingPOSTWithHttpInfo(String email, String repeatPassword, String userName, String userPassword) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = registerUserUsingPOSTRequestBuilder(email, repeatPassword, userName, userPassword);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("registerUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Resultobject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Resultobject>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder registerUserUsingPOSTRequestBuilder(String email, String repeatPassword, String userName, String userPassword) throws ApiException {
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling registerUserUsingPOST");
    }
    // verify the required parameter 'repeatPassword' is set
    if (repeatPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'repeatPassword' when calling registerUserUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling registerUserUsingPOST");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling registerUserUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/register";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("repeatPassword", repeatPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * release
   * 发布流程定义
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param releaseState PROCESS_DEFINITION_RELEASE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result releaseProcessDefinitionUsingPOST(Long code, Long projectCode, Object releaseState) throws ApiException {
    ApiResponse<Result> localVarResponse = releaseProcessDefinitionUsingPOSTWithHttpInfo(code, projectCode, releaseState);
    return localVarResponse.getData();
  }

  /**
   * release
   * 发布流程定义
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param releaseState PROCESS_DEFINITION_RELEASE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> releaseProcessDefinitionUsingPOSTWithHttpInfo(Long code, Long projectCode, Object releaseState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = releaseProcessDefinitionUsingPOSTRequestBuilder(code, projectCode, releaseState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("releaseProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder releaseProcessDefinitionUsingPOSTRequestBuilder(Long code, Long projectCode, Object releaseState) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling releaseProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling releaseProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'releaseState' is set
    if (releaseState == null) {
      throw new ApiException(400, "Missing the required parameter 'releaseState' when calling releaseProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/release"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * releaseWorkflowAndSchedule
   * RELEASE_WORKFLOW_SCHEDULE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode 流程定义名称 (required)
   * @param releaseState 发布流程定义 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result releaseWorkflowAndScheduleUsingPOST(Long code, String projectCode, Object releaseState) throws ApiException {
    ApiResponse<Result> localVarResponse = releaseWorkflowAndScheduleUsingPOSTWithHttpInfo(code, projectCode, releaseState);
    return localVarResponse.getData();
  }

  /**
   * releaseWorkflowAndSchedule
   * RELEASE_WORKFLOW_SCHEDULE_NOTES
   * @param code 流程定义编码 (required)
   * @param projectCode 流程定义名称 (required)
   * @param releaseState 发布流程定义 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> releaseWorkflowAndScheduleUsingPOSTWithHttpInfo(Long code, String projectCode, Object releaseState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = releaseWorkflowAndScheduleUsingPOSTRequestBuilder(code, projectCode, releaseState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("releaseWorkflowAndScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder releaseWorkflowAndScheduleUsingPOSTRequestBuilder(Long code, String projectCode, Object releaseState) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling releaseWorkflowAndScheduleUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling releaseWorkflowAndScheduleUsingPOST");
    }
    // verify the required parameter 'releaseState' is set
    if (releaseState == null) {
      throw new ApiException(400, "Missing the required parameter 'releaseState' when calling releaseWorkflowAndScheduleUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/release-workflow"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * signOut
   * 退出登录
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result signOutUsingPOST() throws ApiException {
    ApiResponse<Result> localVarResponse = signOutUsingPOSTWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * signOut
   * 退出登录
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> signOutUsingPOSTWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = signOutUsingPOSTRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("signOutUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder signOutUsingPOSTRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/signOut";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * startCheckProcessDefinition
   * 检查流程定义
   * @param processDefinitionCode 流程定义编码 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result startCheckProcessDefinitionUsingPOST(Long processDefinitionCode) throws ApiException {
    ApiResponse<Result> localVarResponse = startCheckProcessDefinitionUsingPOSTWithHttpInfo(processDefinitionCode);
    return localVarResponse.getData();
  }

  /**
   * startCheckProcessDefinition
   * 检查流程定义
   * @param processDefinitionCode 流程定义编码 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> startCheckProcessDefinitionUsingPOSTWithHttpInfo(Long processDefinitionCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startCheckProcessDefinitionUsingPOSTRequestBuilder(processDefinitionCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("startCheckProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startCheckProcessDefinitionUsingPOSTRequestBuilder(Long processDefinitionCode) throws ApiException {
    // verify the required parameter 'processDefinitionCode' is set
    if (processDefinitionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionCode' when calling startCheckProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/executors/start-check";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionCode", processDefinitionCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * startProcessInstance
   * 运行流程实例
   * @param failureStrategy 失败策略 (required)
   * @param processDefinitionCode 流程定义编码 (required)
   * @param processInstancePriority 流程实例优先级 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param scheduleTime 定时时间 (required)
   * @param warningGroupId 发送组ID (required)
   * @param warningType 发送策略 (required)
   * @param dryRun dryRun (optional, default to 0)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param execType 指令类型 (optional)
   * @param expectedParallelismNumber 补数任务自定义并行度 (optional)
   * @param runMode 运行模式 (optional)
   * @param startNodeList 开始节点列表(节点name) (optional)
   * @param startParams 启动参数 (optional)
   * @param taskDependType 任务依赖类型 (optional)
   * @param timeout 超时时间 (optional)
   * @param workerGroup worker群组 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result startProcessInstanceUsingPOST(Object failureStrategy, Long processDefinitionCode, Object processInstancePriority, Long projectCode, String scheduleTime, Integer warningGroupId, Object warningType, Integer dryRun, Long environmentCode, Object execType, Integer expectedParallelismNumber, Object runMode, String startNodeList, String startParams, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = startProcessInstanceUsingPOSTWithHttpInfo(failureStrategy, processDefinitionCode, processInstancePriority, projectCode, scheduleTime, warningGroupId, warningType, dryRun, environmentCode, execType, expectedParallelismNumber, runMode, startNodeList, startParams, taskDependType, timeout, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * startProcessInstance
   * 运行流程实例
   * @param failureStrategy 失败策略 (required)
   * @param processDefinitionCode 流程定义编码 (required)
   * @param processInstancePriority 流程实例优先级 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param scheduleTime 定时时间 (required)
   * @param warningGroupId 发送组ID (required)
   * @param warningType 发送策略 (required)
   * @param dryRun dryRun (optional, default to 0)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param execType 指令类型 (optional)
   * @param expectedParallelismNumber 补数任务自定义并行度 (optional)
   * @param runMode 运行模式 (optional)
   * @param startNodeList 开始节点列表(节点name) (optional)
   * @param startParams 启动参数 (optional)
   * @param taskDependType 任务依赖类型 (optional)
   * @param timeout 超时时间 (optional)
   * @param workerGroup worker群组 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> startProcessInstanceUsingPOSTWithHttpInfo(Object failureStrategy, Long processDefinitionCode, Object processInstancePriority, Long projectCode, String scheduleTime, Integer warningGroupId, Object warningType, Integer dryRun, Long environmentCode, Object execType, Integer expectedParallelismNumber, Object runMode, String startNodeList, String startParams, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startProcessInstanceUsingPOSTRequestBuilder(failureStrategy, processDefinitionCode, processInstancePriority, projectCode, scheduleTime, warningGroupId, warningType, dryRun, environmentCode, execType, expectedParallelismNumber, runMode, startNodeList, startParams, taskDependType, timeout, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("startProcessInstanceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startProcessInstanceUsingPOSTRequestBuilder(Object failureStrategy, Long processDefinitionCode, Object processInstancePriority, Long projectCode, String scheduleTime, Integer warningGroupId, Object warningType, Integer dryRun, Long environmentCode, Object execType, Integer expectedParallelismNumber, Object runMode, String startNodeList, String startParams, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    // verify the required parameter 'failureStrategy' is set
    if (failureStrategy == null) {
      throw new ApiException(400, "Missing the required parameter 'failureStrategy' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'processDefinitionCode' is set
    if (processDefinitionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionCode' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'processInstancePriority' is set
    if (processInstancePriority == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstancePriority' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'scheduleTime' is set
    if (scheduleTime == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduleTime' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'warningGroupId' is set
    if (warningGroupId == null) {
      throw new ApiException(400, "Missing the required parameter 'warningGroupId' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'warningType' is set
    if (warningType == null) {
      throw new ApiException(400, "Missing the required parameter 'warningType' when calling startProcessInstanceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/executors/start-process-instance"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dryRun", dryRun));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("environmentCode", environmentCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("execType", execType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expectedParallelismNumber", expectedParallelismNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionCode", processDefinitionCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("runMode", runMode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleTime", scheduleTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startNodeList", startNodeList));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startParams", startParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDependType", taskDependType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * switchVersion
   * 切换流程版本
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result switchProcessDefinitionVersionUsingGET(Long code, Long projectCode, Integer version) throws ApiException {
    ApiResponse<Result> localVarResponse = switchProcessDefinitionVersionUsingGETWithHttpInfo(code, projectCode, version);
    return localVarResponse.getData();
  }

  /**
   * switchVersion
   * 切换流程版本
   * @param code 流程定义编码 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param version 版本号 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> switchProcessDefinitionVersionUsingGETWithHttpInfo(Long code, Long projectCode, Integer version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = switchProcessDefinitionVersionUsingGETRequestBuilder(code, projectCode, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("switchProcessDefinitionVersionUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder switchProcessDefinitionVersionUsingGETRequestBuilder(Long code, Long projectCode, Integer version) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling switchProcessDefinitionVersionUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling switchProcessDefinitionVersionUsingGET");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling switchProcessDefinitionVersionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/versions/{version}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthDatasource
   * 未授权的数据源
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result unauthDatasourceUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = unauthDatasourceUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * unauthDatasource
   * 未授权的数据源
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> unauthDatasourceUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthDatasourceUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthDatasourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthDatasourceUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling unauthDatasourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/unauth-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthUDFFunc
   * 取消udf函数授权
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void unauthUDFFuncUsingGET(Integer userId) throws ApiException {
    unauthUDFFuncUsingGETWithHttpInfo(userId);
  }

  /**
   * unauthUDFFunc
   * 取消udf函数授权
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unauthUDFFuncUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthUDFFuncUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthUDFFuncUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthUDFFuncUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling unauthUDFFuncUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/unauth-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthorizedUser
   * 取消授权
   * @param alertgroupId 报警组ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result unauthorizedUserUsingGET(String alertgroupId) throws ApiException {
    ApiResponse<Result> localVarResponse = unauthorizedUserUsingGETWithHttpInfo(alertgroupId);
    return localVarResponse.getData();
  }

  /**
   * unauthorizedUser
   * 取消授权
   * @param alertgroupId 报警组ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> unauthorizedUserUsingGETWithHttpInfo(String alertgroupId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthorizedUserUsingGETRequestBuilder(alertgroupId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthorizedUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthorizedUserUsingGETRequestBuilder(String alertgroupId) throws ApiException {
    // verify the required parameter 'alertgroupId' is set
    if (alertgroupId == null) {
      throw new ApiException(400, "Missing the required parameter 'alertgroupId' when calling unauthorizedUserUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/unauth-user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertgroupId", alertgroupId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateAlertPluginInstance
   * 更新告警插件实例
   * @param id id (required)
   * @param instanceName 告警插件实例名称 (required)
   * @param pluginInstanceParams 告警插件实例参数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateAlertPluginInstanceUsingPUT(Integer id, String instanceName, String pluginInstanceParams) throws ApiException {
    ApiResponse<Result> localVarResponse = updateAlertPluginInstanceUsingPUTWithHttpInfo(id, instanceName, pluginInstanceParams);
    return localVarResponse.getData();
  }

  /**
   * updateAlertPluginInstance
   * 更新告警插件实例
   * @param id id (required)
   * @param instanceName 告警插件实例名称 (required)
   * @param pluginInstanceParams 告警插件实例参数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateAlertPluginInstanceUsingPUTWithHttpInfo(Integer id, String instanceName, String pluginInstanceParams) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAlertPluginInstanceUsingPUTRequestBuilder(id, instanceName, pluginInstanceParams);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateAlertPluginInstanceUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAlertPluginInstanceUsingPUTRequestBuilder(Integer id, String instanceName, String pluginInstanceParams) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAlertPluginInstanceUsingPUT");
    }
    // verify the required parameter 'instanceName' is set
    if (instanceName == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceName' when calling updateAlertPluginInstanceUsingPUT");
    }
    // verify the required parameter 'pluginInstanceParams' is set
    if (pluginInstanceParams == null) {
      throw new ApiException(400, "Missing the required parameter 'pluginInstanceParams' when calling updateAlertPluginInstanceUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("instanceName", instanceName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pluginInstanceParams", pluginInstanceParams));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateAlertgroup
   * 编辑(更新)告警组
   * @param alertInstanceIds alertInstanceIds (required)
   * @param groupName 组名称 (required)
   * @param id 报警组ID (required)
   * @param description 备注(描述) (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateAlertgroupUsingPUT(String alertInstanceIds, String groupName, Integer id, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateAlertgroupUsingPUTWithHttpInfo(alertInstanceIds, groupName, id, description);
    return localVarResponse.getData();
  }

  /**
   * updateAlertgroup
   * 编辑(更新)告警组
   * @param alertInstanceIds alertInstanceIds (required)
   * @param groupName 组名称 (required)
   * @param id 报警组ID (required)
   * @param description 备注(描述) (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateAlertgroupUsingPUTWithHttpInfo(String alertInstanceIds, String groupName, Integer id, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAlertgroupUsingPUTRequestBuilder(alertInstanceIds, groupName, id, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateAlertgroupUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAlertgroupUsingPUTRequestBuilder(String alertInstanceIds, String groupName, Integer id, String description) throws ApiException {
    // verify the required parameter 'alertInstanceIds' is set
    if (alertInstanceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'alertInstanceIds' when calling updateAlertgroupUsingPUT");
    }
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling updateAlertgroupUsingPUT");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAlertgroupUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertInstanceIds", alertInstanceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateDataSource
   * 更新数据源
   * @param id 数据源ID (required)
   * @param dataSourceParam 数据源参数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateDataSourceUsingPUT(Object id, BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    ApiResponse<Result> localVarResponse = updateDataSourceUsingPUTWithHttpInfo(id, dataSourceParam);
    return localVarResponse.getData();
  }

  /**
   * updateDataSource
   * 更新数据源
   * @param id 数据源ID (required)
   * @param dataSourceParam 数据源参数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateDataSourceUsingPUTWithHttpInfo(Object id, BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDataSourceUsingPUTRequestBuilder(id, dataSourceParam);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateDataSourceUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDataSourceUsingPUTRequestBuilder(Object id, BaseDataSourceParamDTO dataSourceParam) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateDataSourceUsingPUT");
    }
    // verify the required parameter 'dataSourceParam' is set
    if (dataSourceParam == null) {
      throw new ApiException(400, "Missing the required parameter 'dataSourceParam' when calling updateDataSourceUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dataSourceParam);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateBasicInfo
   * UPDATE_PROCESS_DEFINITION_BASIC_INFO_NOTES
   * @param code 流程定义编码 (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param releaseState 发布流程定义 (optional)
   * @param scheduleJson scheduleJson (optional)
   * @param timeout timeout (optional, default to 0)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProcessDefinitionBasicInfoUsingPUT(Long code, String name, Long projectCode, String tenantCode, String description, String globalParams, Object releaseState, String scheduleJson, Integer timeout) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProcessDefinitionBasicInfoUsingPUTWithHttpInfo(code, name, projectCode, tenantCode, description, globalParams, releaseState, scheduleJson, timeout);
    return localVarResponse.getData();
  }

  /**
   * updateBasicInfo
   * UPDATE_PROCESS_DEFINITION_BASIC_INFO_NOTES
   * @param code 流程定义编码 (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param releaseState 发布流程定义 (optional)
   * @param scheduleJson scheduleJson (optional)
   * @param timeout timeout (optional, default to 0)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProcessDefinitionBasicInfoUsingPUTWithHttpInfo(Long code, String name, Long projectCode, String tenantCode, String description, String globalParams, Object releaseState, String scheduleJson, Integer timeout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProcessDefinitionBasicInfoUsingPUTRequestBuilder(code, name, projectCode, tenantCode, description, globalParams, releaseState, scheduleJson, timeout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProcessDefinitionBasicInfoUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProcessDefinitionBasicInfoUsingPUTRequestBuilder(Long code, String name, Long projectCode, String tenantCode, String description, String globalParams, Object releaseState, String scheduleJson, Integer timeout) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling updateProcessDefinitionBasicInfoUsingPUT");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateProcessDefinitionBasicInfoUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateProcessDefinitionBasicInfoUsingPUT");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling updateProcessDefinitionBasicInfoUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/basic-info"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("globalParams", globalParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleJson", scheduleJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * update
   * 更新流程定义
   * @param code 流程定义编码 (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson taskDefinitionJson (required)
   * @param taskRelationJson taskRelationJson (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param releaseState 发布流程定义 (optional)
   * @param timeout timeout (optional, default to 0)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProcessDefinitionUsingPUT(Long code, String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Object releaseState, Integer timeout) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProcessDefinitionUsingPUTWithHttpInfo(code, locations, name, projectCode, taskDefinitionJson, taskRelationJson, tenantCode, description, globalParams, releaseState, timeout);
    return localVarResponse.getData();
  }

  /**
   * update
   * 更新流程定义
   * @param code 流程定义编码 (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @param taskDefinitionJson taskDefinitionJson (required)
   * @param taskRelationJson taskRelationJson (required)
   * @param tenantCode tenantCode (required)
   * @param description 流程定义描述信息 (optional)
   * @param globalParams globalParams (optional, default to [])
   * @param releaseState 发布流程定义 (optional)
   * @param timeout timeout (optional, default to 0)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProcessDefinitionUsingPUTWithHttpInfo(Long code, String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Object releaseState, Integer timeout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProcessDefinitionUsingPUTRequestBuilder(code, locations, name, projectCode, taskDefinitionJson, taskRelationJson, tenantCode, description, globalParams, releaseState, timeout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProcessDefinitionUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProcessDefinitionUsingPUTRequestBuilder(Long code, String locations, String name, Long projectCode, String taskDefinitionJson, String taskRelationJson, String tenantCode, String description, String globalParams, Object releaseState, Integer timeout) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'locations' is set
    if (locations == null) {
      throw new ApiException(400, "Missing the required parameter 'locations' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'taskDefinitionJson' is set
    if (taskDefinitionJson == null) {
      throw new ApiException(400, "Missing the required parameter 'taskDefinitionJson' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'taskRelationJson' is set
    if (taskRelationJson == null) {
      throw new ApiException(400, "Missing the required parameter 'taskRelationJson' when calling updateProcessDefinitionUsingPUT");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling updateProcessDefinitionUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("globalParams", globalParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDefinitionJson", taskDefinitionJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskRelationJson", taskRelationJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateProcessInstance
   * 更新流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param syncDefine 更新流程实例的信息是否同步到流程定义 (required)
   * @param flag flag (optional)
   * @param globalParams PROCESS_GLOBAL_PARAMS (optional)
   * @param locations 流程实例节点坐标位置信息(json格式) (optional)
   * @param scheduleTime 定时时间 (optional)
   * @param taskDefinitionJson TASK_DEFINITION_JSON (optional)
   * @param taskRelationJson TASK_RELATION_JSON (optional)
   * @param tenantCode 操作系统租户 (optional)
   * @param timeout PROCESS_TIMEOUT (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProcessInstanceUsingPUT(Integer id, Long projectCode, String syncDefine, String flag, String globalParams, String locations, String scheduleTime, String taskDefinitionJson, String taskRelationJson, String tenantCode, String timeout) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProcessInstanceUsingPUTWithHttpInfo(id, projectCode, syncDefine, flag, globalParams, locations, scheduleTime, taskDefinitionJson, taskRelationJson, tenantCode, timeout);
    return localVarResponse.getData();
  }

  /**
   * updateProcessInstance
   * 更新流程实例
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param syncDefine 更新流程实例的信息是否同步到流程定义 (required)
   * @param flag flag (optional)
   * @param globalParams PROCESS_GLOBAL_PARAMS (optional)
   * @param locations 流程实例节点坐标位置信息(json格式) (optional)
   * @param scheduleTime 定时时间 (optional)
   * @param taskDefinitionJson TASK_DEFINITION_JSON (optional)
   * @param taskRelationJson TASK_RELATION_JSON (optional)
   * @param tenantCode 操作系统租户 (optional)
   * @param timeout PROCESS_TIMEOUT (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProcessInstanceUsingPUTWithHttpInfo(Integer id, Long projectCode, String syncDefine, String flag, String globalParams, String locations, String scheduleTime, String taskDefinitionJson, String taskRelationJson, String tenantCode, String timeout) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProcessInstanceUsingPUTRequestBuilder(id, projectCode, syncDefine, flag, globalParams, locations, scheduleTime, taskDefinitionJson, taskRelationJson, tenantCode, timeout);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProcessInstanceUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProcessInstanceUsingPUTRequestBuilder(Integer id, Long projectCode, String syncDefine, String flag, String globalParams, String locations, String scheduleTime, String taskDefinitionJson, String taskRelationJson, String tenantCode, String timeout) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateProcessInstanceUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateProcessInstanceUsingPUT");
    }
    // verify the required parameter 'syncDefine' is set
    if (syncDefine == null) {
      throw new ApiException(400, "Missing the required parameter 'syncDefine' when calling updateProcessInstanceUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flag", flag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("globalParams", globalParams));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleTime", scheduleTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("syncDefine", syncDefine));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDefinitionJson", taskDefinitionJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskRelationJson", taskRelationJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * update
   * 更新项目
   * @param code PROJECT_CODE (required)
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @param userName 用户名 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProjectUsingPUT(Long code, String description, String projectName, String userName) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProjectUsingPUTWithHttpInfo(code, description, projectName, userName);
    return localVarResponse.getData();
  }

  /**
   * update
   * 更新项目
   * @param code PROJECT_CODE (required)
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @param userName 用户名 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProjectUsingPUTWithHttpInfo(Long code, String description, String projectName, String userName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProjectUsingPUTRequestBuilder(code, description, projectName, userName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProjectUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProjectUsingPUTRequestBuilder(Long code, String description, String projectName, String userName) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling updateProjectUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectName", projectName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateQueue
   * 更新队列
   * @param id 队列ID (required)
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateQueueUsingPUT(Integer id, String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = updateQueueUsingPUTWithHttpInfo(id, queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * updateQueue
   * 更新队列
   * @param id 队列ID (required)
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateQueueUsingPUTWithHttpInfo(Integer id, String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateQueueUsingPUTRequestBuilder(id, queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateQueueUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateQueueUsingPUTRequestBuilder(Integer id, String queue, String queueName) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateQueueUsingPUT");
    }
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling updateQueueUsingPUT");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling updateQueueUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queues/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateResourceContent
   * 在线更新资源文件
   * @param content 资源文件内容 (required)
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateResourceContentUsingPUT(String content, Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = updateResourceContentUsingPUTWithHttpInfo(content, id);
    return localVarResponse.getData();
  }

  /**
   * updateResourceContent
   * 在线更新资源文件
   * @param content 资源文件内容 (required)
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateResourceContentUsingPUTWithHttpInfo(String content, Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateResourceContentUsingPUTRequestBuilder(content, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateResourceContentUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateResourceContentUsingPUTRequestBuilder(String content, Integer id) throws ApiException {
    // verify the required parameter 'content' is set
    if (content == null) {
      throw new ApiException(400, "Missing the required parameter 'content' when calling updateResourceContentUsingPUT");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateResourceContentUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}/update-content"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateResource
   * 在线更新资源文件
   * @param id 资源ID (required)
   * @param name 资源文件名称 (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateResourceUsingPUT(Integer id, String name, Object type, Object file, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateResourceUsingPUTWithHttpInfo(id, name, type, file, description);
    return localVarResponse.getData();
  }

  /**
   * updateResource
   * 在线更新资源文件
   * @param id 资源ID (required)
   * @param name 资源文件名称 (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateResourceUsingPUTWithHttpInfo(Integer id, String name, Object type, Object file, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateResourceUsingPUTRequestBuilder(id, name, type, file, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateResourceUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateResourceUsingPUTRequestBuilder(Integer id, String name, Object type, Object file, String description) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateResourceUsingPUT");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateResourceUsingPUT");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling updateResourceUsingPUT");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling updateResourceUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateScheduleByProcessDefinitionCode
   * UPDATE_SCHEDULE_BY_PROCESS_DEFINITION_CODE_NOTES
   * @param code code (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup worker群组 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateScheduleByProcessDefinitionCodeUsingPUT(Long code, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = updateScheduleByProcessDefinitionCodeUsingPUTWithHttpInfo(code, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * updateScheduleByProcessDefinitionCode
   * UPDATE_SCHEDULE_BY_PROCESS_DEFINITION_CODE_NOTES
   * @param code code (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup worker群组 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateScheduleByProcessDefinitionCodeUsingPUTWithHttpInfo(Long code, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateScheduleByProcessDefinitionCodeUsingPUTRequestBuilder(code, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateScheduleByProcessDefinitionCodeUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateScheduleByProcessDefinitionCodeUsingPUTRequestBuilder(Long code, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling updateScheduleByProcessDefinitionCodeUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateScheduleByProcessDefinitionCodeUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/update/{code}"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("environmentCode", environmentCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateSchedule
   * 更新定时
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup worker群组 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateScheduleUsingPUT(Integer id, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = updateScheduleUsingPUTWithHttpInfo(id, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * updateSchedule
   * 更新定时
   * @param id 定时ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @param environmentCode ENVIRONMENT_CODE (optional)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup worker群组 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateScheduleUsingPUTWithHttpInfo(Integer id, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateScheduleUsingPUTRequestBuilder(id, projectCode, environmentCode, failureStrategy, processInstancePriority, schedule, warningGroupId, warningType, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateScheduleUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateScheduleUsingPUTRequestBuilder(Integer id, Long projectCode, Long environmentCode, String failureStrategy, String processInstancePriority, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateScheduleUsingPUT");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling updateScheduleUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/schedules/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("environmentCode", environmentCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateTenant
   * 更新租户
   * @param id 租户ID (required)
   * @param queueId 队列ID (required)
   * @param tenantCode 操作系统租户 (required)
   * @param description 租户描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateTenantUsingPUT(Integer id, Integer queueId, String tenantCode, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateTenantUsingPUTWithHttpInfo(id, queueId, tenantCode, description);
    return localVarResponse.getData();
  }

  /**
   * updateTenant
   * 更新租户
   * @param id 租户ID (required)
   * @param queueId 队列ID (required)
   * @param tenantCode 操作系统租户 (required)
   * @param description 租户描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateTenantUsingPUTWithHttpInfo(Integer id, Integer queueId, String tenantCode, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTenantUsingPUTRequestBuilder(id, queueId, tenantCode, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateTenantUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTenantUsingPUTRequestBuilder(Integer id, Integer queueId, String tenantCode, String description) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTenantUsingPUT");
    }
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling updateTenantUsingPUT");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling updateTenantUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueId", queueId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateUdfFunc
   * 更新udf函数
   * @param className 包名类名 (required)
   * @param funcName 函数名称 (required)
   * @param id udf ID (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateUdfFuncUsingPUT(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateUdfFuncUsingPUTWithHttpInfo(className, funcName, id, resourceId, type, argTypes, database, description);
    return localVarResponse.getData();
  }

  /**
   * updateUdfFunc
   * 更新udf函数
   * @param className 包名类名 (required)
   * @param funcName 函数名称 (required)
   * @param id udf ID (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateUdfFuncUsingPUTWithHttpInfo(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUdfFuncUsingPUTRequestBuilder(className, funcName, id, resourceId, type, argTypes, database, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateUdfFuncUsingPUT", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUdfFuncUsingPUTRequestBuilder(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    // verify the required parameter 'className' is set
    if (className == null) {
      throw new ApiException(400, "Missing the required parameter 'className' when calling updateUdfFuncUsingPUT");
    }
    // verify the required parameter 'funcName' is set
    if (funcName == null) {
      throw new ApiException(400, "Missing the required parameter 'funcName' when calling updateUdfFuncUsingPUT");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUdfFuncUsingPUT");
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceId' when calling updateUdfFuncUsingPUT");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling updateUdfFuncUsingPUT");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{resourceId}/udf-func/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{resourceId}", ApiClient.urlEncode(resourceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("argTypes", argTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("className", className));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("funcName", funcName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateUser
   * 更新用户
   * @param email 邮箱 (required)
   * @param id 用户ID (required)
   * @param tenantId 租户ID (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param state 状态 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateUserUsingPOST(String email, Integer id, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    ApiResponse<Result> localVarResponse = updateUserUsingPOSTWithHttpInfo(email, id, tenantId, userName, userPassword, phone, queue, state);
    return localVarResponse.getData();
  }

  /**
   * updateUser
   * 更新用户
   * @param email 邮箱 (required)
   * @param id 用户ID (required)
   * @param tenantId 租户ID (required)
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param state 状态 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateUserUsingPOSTWithHttpInfo(String email, Integer id, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUserUsingPOSTRequestBuilder(email, id, tenantId, userName, userPassword, phone, queue, state);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUserUsingPOSTRequestBuilder(String email, Integer id, Integer tenantId, String userName, String userPassword, String phone, String queue, Integer state) throws ApiException {
    // verify the required parameter 'email' is set
    if (email == null) {
      throw new ApiException(400, "Missing the required parameter 'email' when calling updateUserUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUserUsingPOST");
    }
    // verify the required parameter 'tenantId' is set
    if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling updateUserUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling updateUserUsingPOST");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling updateUserUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyDataSourceName
   * 验证数据源
   * @param name 数据源名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyDataSourceNameUsingGET(String name) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyDataSourceNameUsingGETWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * verifyDataSourceName
   * 验证数据源
   * @param name 数据源名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyDataSourceNameUsingGETWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyDataSourceNameUsingGETRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyDataSourceNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyDataSourceNameUsingGETRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyDataSourceNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyGroupName
   * 检查告警组是否存在
   * @param groupName 组名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyGroupNameUsingGET(String groupName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyGroupNameUsingGETWithHttpInfo(groupName);
    return localVarResponse.getData();
  }

  /**
   * verifyGroupName
   * 检查告警组是否存在
   * @param groupName 组名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyGroupNameUsingGETWithHttpInfo(String groupName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyGroupNameUsingGETRequestBuilder(groupName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyGroupNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyGroupNameUsingGETRequestBuilder(String groupName) throws ApiException {
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling verifyGroupNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-groups/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyAlertInstanceName
   * 验证告警插件名称
   * @param alertInstanceName 告警插件名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyGroupNameUsingGET1(String alertInstanceName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyGroupNameUsingGET1WithHttpInfo(alertInstanceName);
    return localVarResponse.getData();
  }

  /**
   * verifyAlertInstanceName
   * 验证告警插件名称
   * @param alertInstanceName 告警插件名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyGroupNameUsingGET1WithHttpInfo(String alertInstanceName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyGroupNameUsingGET1RequestBuilder(alertInstanceName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyGroupNameUsingGET1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyGroupNameUsingGET1RequestBuilder(String alertInstanceName) throws ApiException {
    // verify the required parameter 'alertInstanceName' is set
    if (alertInstanceName == null) {
      throw new ApiException(400, "Missing the required parameter 'alertInstanceName' when calling verifyGroupNameUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-plugin-instances/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertInstanceName", alertInstanceName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verify-name
   * 验证流程定义名字
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyProcessDefinitionNameUsingGET(String name, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyProcessDefinitionNameUsingGETWithHttpInfo(name, projectCode);
    return localVarResponse.getData();
  }

  /**
   * verify-name
   * 验证流程定义名字
   * @param name 流程定义名称 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyProcessDefinitionNameUsingGETWithHttpInfo(String name, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyProcessDefinitionNameUsingGETRequestBuilder(name, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyProcessDefinitionNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyProcessDefinitionNameUsingGETRequestBuilder(String name, Long projectCode) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyProcessDefinitionNameUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling verifyProcessDefinitionNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/verify-name"
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyQueue
   * 验证队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyQueueUsingPOST(String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyQueueUsingPOSTWithHttpInfo(queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * verifyQueue
   * 验证队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyQueueUsingPOSTWithHttpInfo(String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyQueueUsingPOSTRequestBuilder(queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyQueueUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyQueueUsingPOSTRequestBuilder(String queue, String queueName) throws ApiException {
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling verifyQueueUsingPOST");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling verifyQueueUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queues/verify";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyResourceName
   * 验证资源名称
   * @param fullName 资源全名 (required)
   * @param type 资源文件类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyResourceNameUsingGET(String fullName, Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyResourceNameUsingGETWithHttpInfo(fullName, type);
    return localVarResponse.getData();
  }

  /**
   * verifyResourceName
   * 验证资源名称
   * @param fullName 资源全名 (required)
   * @param type 资源文件类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyResourceNameUsingGETWithHttpInfo(String fullName, Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyResourceNameUsingGETRequestBuilder(fullName, type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyResourceNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyResourceNameUsingGETRequestBuilder(String fullName, Object type) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling verifyResourceNameUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling verifyResourceNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fullName", fullName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyTenantCode
   * 验证租户
   * @param tenantCode 操作系统租户 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyTenantCodeUsingGET(String tenantCode) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyTenantCodeUsingGETWithHttpInfo(tenantCode);
    return localVarResponse.getData();
  }

  /**
   * verifyTenantCode
   * 验证租户
   * @param tenantCode 操作系统租户 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyTenantCodeUsingGETWithHttpInfo(String tenantCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyTenantCodeUsingGETRequestBuilder(tenantCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyTenantCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyTenantCodeUsingGETRequestBuilder(String tenantCode) throws ApiException {
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling verifyTenantCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenants/verify-code";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyUdfFuncName
   * 验证udf函数名
   * @param name 函数名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyUdfFuncNameUsingGET(String name) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyUdfFuncNameUsingGETWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * verifyUdfFuncName
   * 验证udf函数名
   * @param name 函数名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyUdfFuncNameUsingGETWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyUdfFuncNameUsingGETRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyUdfFuncNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyUdfFuncNameUsingGETRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyUdfFuncNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyUserName
   * 验证用户名
   * @param userName 用户名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyUserNameUsingGET(String userName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyUserNameUsingGETWithHttpInfo(userName);
    return localVarResponse.getData();
  }

  /**
   * verifyUserName
   * 验证用户名
   * @param userName 用户名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyUserNameUsingGETWithHttpInfo(String userName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyUserNameUsingGETRequestBuilder(userName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyUserNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyUserNameUsingGETRequestBuilder(String userName) throws ApiException {
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling verifyUserNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/verify-user-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewResource
   * 通过ID浏览资源
   * @param id 资源ID (required)
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewResourceUsingGET(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    ApiResponse<Result> localVarResponse = viewResourceUsingGETWithHttpInfo(id, limit, skipLineNum);
    return localVarResponse.getData();
  }

  /**
   * viewResource
   * 通过ID浏览资源
   * @param id 资源ID (required)
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewResourceUsingGETWithHttpInfo(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewResourceUsingGETRequestBuilder(id, limit, skipLineNum);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewResourceUsingGETRequestBuilder(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewResourceUsingGET");
    }
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling viewResourceUsingGET");
    }
    // verify the required parameter 'skipLineNum' is set
    if (skipLineNum == null) {
      throw new ApiException(400, "Missing the required parameter 'skipLineNum' when calling viewResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}/view"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipLineNum", skipLineNum));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewTree
   * 树状图
   * @param code 流程定义编码 (required)
   * @param limit 显示多少条 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewTreeUsingGET(Long code, Integer limit, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = viewTreeUsingGETWithHttpInfo(code, limit, projectCode);
    return localVarResponse.getData();
  }

  /**
   * viewTree
   * 树状图
   * @param code 流程定义编码 (required)
   * @param limit 显示多少条 (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewTreeUsingGETWithHttpInfo(Long code, Integer limit, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewTreeUsingGETRequestBuilder(code, limit, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewTreeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewTreeUsingGETRequestBuilder(Long code, Integer limit, Long projectCode) throws ApiException {
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling viewTreeUsingGET");
    }
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling viewTreeUsingGET");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling viewTreeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-definition/{code}/view-tree"
        .replace("{code}", ApiClient.urlEncode(code.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * vieGanttTree
   * 浏览Gantt图
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewTreeUsingGET1(Integer id, Long projectCode) throws ApiException {
    ApiResponse<Result> localVarResponse = viewTreeUsingGET1WithHttpInfo(id, projectCode);
    return localVarResponse.getData();
  }

  /**
   * vieGanttTree
   * 浏览Gantt图
   * @param id 流程实例ID (required)
   * @param projectCode PROJECT_CODE (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewTreeUsingGET1WithHttpInfo(Integer id, Long projectCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewTreeUsingGET1RequestBuilder(id, projectCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewTreeUsingGET1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewTreeUsingGET1RequestBuilder(Integer id, Long projectCode) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewTreeUsingGET1");
    }
    // verify the required parameter 'projectCode' is set
    if (projectCode == null) {
      throw new ApiException(400, "Missing the required parameter 'projectCode' when calling viewTreeUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}/view-gantt"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{projectCode}", ApiClient.urlEncode(projectCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewUIUdfFunction
   * 查看udf函数
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewUIUdfFunctionUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = viewUIUdfFunctionUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * viewUIUdfFunction
   * 查看udf函数
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewUIUdfFunctionUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewUIUdfFunctionUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewUIUdfFunctionUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewUIUdfFunctionUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewUIUdfFunctionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/{id}/udf-func"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewVariables
   * 查询流程实例全局变量和局部变量
   * @param id 流程实例ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewVariablesUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = viewVariablesUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * viewVariables
   * 查询流程实例全局变量和局部变量
   * @param id 流程实例ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewVariablesUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewVariablesUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewVariablesUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewVariablesUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewVariablesUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectCode}/process-instances/{id}/view-variables"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
