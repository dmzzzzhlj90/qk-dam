/*
 * Dolphin Scheduler Api Docs
 * Dolphin Scheduler Api Docs
 *
 * The version of the OpenAPI document: 1.3.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.qk.datacenter.api;

import com.qk.datacenter.client.ApiClient;
import com.qk.datacenter.client.ApiException;
import com.qk.datacenter.client.ApiResponse;
import com.qk.datacenter.client.Pair;

import java.time.OffsetDateTime;
import com.qk.datacenter.model.ResponseEntity;
import com.qk.datacenter.model.Result;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-09T12:28:17.177569+08:00[Asia/Shanghai]")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * authedDatasource
   * 授权的数据源
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result authedDatasourceUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = authedDatasourceUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * authedDatasource
   * 授权的数据源
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> authedDatasourceUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authedDatasourceUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authedDatasourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authedDatasourceUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authedDatasourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/authed-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizeResourceTree
   * AUTHORIZE_RESOURCE_TREE_NOTES
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizeResourceTreeUsingGET(Integer userId) throws ApiException {
    authorizeResourceTreeUsingGETWithHttpInfo(userId);
  }

  /**
   * authorizeResourceTree
   * AUTHORIZE_RESOURCE_TREE_NOTES
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizeResourceTreeUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizeResourceTreeUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizeResourceTreeUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizeResourceTreeUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizeResourceTreeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authorize-resource-tree";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizedFile
   * 授权文件
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizedFileUsingGET(Integer userId) throws ApiException {
    authorizedFileUsingGETWithHttpInfo(userId);
  }

  /**
   * authorizedFile
   * 授权文件
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizedFileUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedFileUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedFileUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedFileUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizedFileUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authed-file";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authUDFFunc
   * 授权udf函数
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void authorizedUDFFunctionUsingGET(Integer userId) throws ApiException {
    authorizedUDFFunctionUsingGETWithHttpInfo(userId);
  }

  /**
   * authUDFFunc
   * 授权udf函数
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authorizedUDFFunctionUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedUDFFunctionUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedUDFFunctionUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedUDFFunctionUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling authorizedUDFFunctionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/authed-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * authorizedUser
   * 授权用户
   * @param alertgroupId 报警组ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result authorizedUserUsingGET(String alertgroupId) throws ApiException {
    ApiResponse<Result> localVarResponse = authorizedUserUsingGETWithHttpInfo(alertgroupId);
    return localVarResponse.getData();
  }

  /**
   * authorizedUser
   * 授权用户
   * @param alertgroupId 报警组ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> authorizedUserUsingGETWithHttpInfo(String alertgroupId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authorizedUserUsingGETRequestBuilder(alertgroupId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("authorizedUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authorizedUserUsingGETRequestBuilder(String alertgroupId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/authed-user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertgroupId", alertgroupId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchDeleteProcessDefinitionByIds
   * 批量删除流程定义通过流程定义ID集合
   * @param projectName 项目名称 (required)
   * @param processDefinitionIds process definition ids (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result batchDeleteProcessDefinitionByIdsUsingGET(String projectName, String processDefinitionIds) throws ApiException {
    ApiResponse<Result> localVarResponse = batchDeleteProcessDefinitionByIdsUsingGETWithHttpInfo(projectName, processDefinitionIds);
    return localVarResponse.getData();
  }

  /**
   * batchDeleteProcessDefinitionByIds
   * 批量删除流程定义通过流程定义ID集合
   * @param projectName 项目名称 (required)
   * @param processDefinitionIds process definition ids (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> batchDeleteProcessDefinitionByIdsUsingGETWithHttpInfo(String projectName, String processDefinitionIds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchDeleteProcessDefinitionByIdsUsingGETRequestBuilder(projectName, processDefinitionIds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchDeleteProcessDefinitionByIdsUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchDeleteProcessDefinitionByIdsUsingGETRequestBuilder(String projectName, String processDefinitionIds) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling batchDeleteProcessDefinitionByIdsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/batch-delete"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionIds", processDefinitionIds));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchDeleteProcessInstanceByIds
   * 
   * @param processInstanceIds processInstanceIds (required)
   * @param projectName projectName (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result batchDeleteProcessInstanceByIdsUsingGET(String processInstanceIds, String projectName, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = batchDeleteProcessInstanceByIdsUsingGETWithHttpInfo(processInstanceIds, projectName, alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * batchDeleteProcessInstanceByIds
   * 
   * @param processInstanceIds processInstanceIds (required)
   * @param projectName projectName (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> batchDeleteProcessInstanceByIdsUsingGETWithHttpInfo(String processInstanceIds, String projectName, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchDeleteProcessInstanceByIdsUsingGETRequestBuilder(processInstanceIds, projectName, alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchDeleteProcessInstanceByIdsUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchDeleteProcessInstanceByIdsUsingGETRequestBuilder(String processInstanceIds, String projectName, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    // verify the required parameter 'processInstanceIds' is set
    if (processInstanceIds == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstanceIds' when calling batchDeleteProcessInstanceByIdsUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling batchDeleteProcessInstanceByIdsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/batch-delete"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceIds", processInstanceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantName", tenantName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * batchExportProcessDefinitionByIds
   * 批量导出工作流定义
   * @param processDefinitionIds 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @throws ApiException if fails to make API call
   */
  public void batchExportProcessDefinitionByIdsUsingGET(String processDefinitionIds, String projectName) throws ApiException {
    batchExportProcessDefinitionByIdsUsingGETWithHttpInfo(processDefinitionIds, projectName);
  }

  /**
   * batchExportProcessDefinitionByIds
   * 批量导出工作流定义
   * @param processDefinitionIds 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> batchExportProcessDefinitionByIdsUsingGETWithHttpInfo(String processDefinitionIds, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = batchExportProcessDefinitionByIdsUsingGETRequestBuilder(processDefinitionIds, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("batchExportProcessDefinitionByIdsUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder batchExportProcessDefinitionByIdsUsingGETRequestBuilder(String processDefinitionIds, String projectName) throws ApiException {
    // verify the required parameter 'processDefinitionIds' is set
    if (processDefinitionIds == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionIds' when calling batchExportProcessDefinitionByIdsUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling batchExportProcessDefinitionByIdsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/export"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionIds", processDefinitionIds));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * connectDataSource
   * 连接数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result connectDataSourceUsingPOST(String database, String host, String name, String port, String principal, List type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    ApiResponse<Result> localVarResponse = connectDataSourceUsingPOSTWithHttpInfo(database, host, name, port, principal, type, userName, connectType, note, other, password);
    return localVarResponse.getData();
  }

  /**
   * connectDataSource
   * 连接数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> connectDataSourceUsingPOSTWithHttpInfo(String database, String host, String name, String port, String principal, List type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = connectDataSourceUsingPOSTRequestBuilder(database, host, name, port, principal, type, userName, connectType, note, other, password);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("connectDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder connectDataSourceUsingPOSTRequestBuilder(String database, String host, String name, String port, String principal, List type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    // verify the required parameter 'database' is set
    if (database == null) {
      throw new ApiException(400, "Missing the required parameter 'database' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'host' is set
    if (host == null) {
      throw new ApiException(400, "Missing the required parameter 'host' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'port' is set
    if (port == null) {
      throw new ApiException(400, "Missing the required parameter 'port' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'principal' is set
    if (principal == null) {
      throw new ApiException(400, "Missing the required parameter 'principal' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling connectDataSourceUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling connectDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/connect";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connectType", connectType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note", note));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("other", other));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("password", password));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port", port));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("principal", principal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * connectionTest
   * 连接数据源测试
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result connectionTestUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = connectionTestUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * connectionTest
   * 连接数据源测试
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> connectionTestUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = connectionTestUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("connectionTestUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder connectionTestUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling connectionTestUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/connect-by-id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * copyProcessDefinition
   * 复制流程定义
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result copyProcessDefinitionUsingPOST(Integer processId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = copyProcessDefinitionUsingPOSTWithHttpInfo(processId, projectName);
    return localVarResponse.getData();
  }

  /**
   * copyProcessDefinition
   * 复制流程定义
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> copyProcessDefinitionUsingPOSTWithHttpInfo(Integer processId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = copyProcessDefinitionUsingPOSTRequestBuilder(processId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("copyProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder copyProcessDefinitionUsingPOSTRequestBuilder(Integer processId, String projectName) throws ApiException {
    // verify the required parameter 'processId' is set
    if (processId == null) {
      throw new ApiException(400, "Missing the required parameter 'processId' when calling copyProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling copyProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/copy"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processId", processId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countCommandState
   * 统计命令状态
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countCommandStateUsingGET(String endDate, Integer projectId, String startDate) throws ApiException {
    ApiResponse<Result> localVarResponse = countCommandStateUsingGETWithHttpInfo(endDate, projectId, startDate);
    return localVarResponse.getData();
  }

  /**
   * countCommandState
   * 统计命令状态
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countCommandStateUsingGETWithHttpInfo(String endDate, Integer projectId, String startDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countCommandStateUsingGETRequestBuilder(endDate, projectId, startDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countCommandStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countCommandStateUsingGETRequestBuilder(String endDate, Integer projectId, String startDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/command-state-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countDefinitionByUser
   * 统计用户创建的流程定义
   * @param projectId 项目ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countDefinitionByUserUsingGET(Integer projectId) throws ApiException {
    ApiResponse<Result> localVarResponse = countDefinitionByUserUsingGETWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * countDefinitionByUser
   * 统计用户创建的流程定义
   * @param projectId 项目ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countDefinitionByUserUsingGETWithHttpInfo(Integer projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countDefinitionByUserUsingGETRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countDefinitionByUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countDefinitionByUserUsingGETRequestBuilder(Integer projectId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/define-user-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countProcessInstanceState
   * 统计流程实例状态
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countProcessInstanceStateUsingGET(String endDate, Integer projectId, String startDate) throws ApiException {
    ApiResponse<Result> localVarResponse = countProcessInstanceStateUsingGETWithHttpInfo(endDate, projectId, startDate);
    return localVarResponse.getData();
  }

  /**
   * countProcessInstanceState
   * 统计流程实例状态
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countProcessInstanceStateUsingGETWithHttpInfo(String endDate, Integer projectId, String startDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countProcessInstanceStateUsingGETRequestBuilder(endDate, projectId, startDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countProcessInstanceStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countProcessInstanceStateUsingGETRequestBuilder(String endDate, Integer projectId, String startDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/process-state-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countQueueState
   * 统计队列里任务状态
   * @param projectId 项目ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countQueueStateUsingGET(Integer projectId) throws ApiException {
    ApiResponse<Result> localVarResponse = countQueueStateUsingGETWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * countQueueState
   * 统计队列里任务状态
   * @param projectId 项目ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countQueueStateUsingGETWithHttpInfo(Integer projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countQueueStateUsingGETRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countQueueStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countQueueStateUsingGETRequestBuilder(Integer projectId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/queue-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * countTaskState
   * 任务状态统计
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result countTaskStateUsingGET(String endDate, Integer projectId, String startDate) throws ApiException {
    ApiResponse<Result> localVarResponse = countTaskStateUsingGETWithHttpInfo(endDate, projectId, startDate);
    return localVarResponse.getData();
  }

  /**
   * countTaskState
   * 任务状态统计
   * @param endDate 结束时间 (optional)
   * @param projectId 项目ID (optional)
   * @param startDate 开始时间 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> countTaskStateUsingGETWithHttpInfo(String endDate, Integer projectId, String startDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = countTaskStateUsingGETRequestBuilder(endDate, projectId, startDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("countTaskStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder countTaskStateUsingGETRequestBuilder(String endDate, Integer projectId, String startDate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/analysis/task-state-count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createAlertgroup
   * create alert group 
   * @param groupName 组名称 (required)
   * @param groupType 组类型 (required)
   * @param description 备注(描述) (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createAlertgroupUsingPOST(String groupName, Object groupType, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createAlertgroupUsingPOSTWithHttpInfo(groupName, groupType, description);
    return localVarResponse.getData();
  }

  /**
   * createAlertgroup
   * create alert group 
   * @param groupName 组名称 (required)
   * @param groupType 组类型 (required)
   * @param description 备注(描述) (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createAlertgroupUsingPOSTWithHttpInfo(String groupName, Object groupType, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAlertgroupUsingPOSTRequestBuilder(groupName, groupType, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createAlertgroupUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAlertgroupUsingPOSTRequestBuilder(String groupName, Object groupType, String description) throws ApiException {
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling createAlertgroupUsingPOST");
    }
    // verify the required parameter 'groupType' is set
    if (groupType == null) {
      throw new ApiException(400, "Missing the required parameter 'groupType' when calling createAlertgroupUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupType", groupType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createDataSource
   * 创建数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createDataSourceUsingPOST(String database, String host, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    ApiResponse<Result> localVarResponse = createDataSourceUsingPOSTWithHttpInfo(database, host, name, port, principal, type, userName, connectType, note, other, password);
    return localVarResponse.getData();
  }

  /**
   * createDataSource
   * 创建数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createDataSourceUsingPOSTWithHttpInfo(String database, String host, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDataSourceUsingPOSTRequestBuilder(database, host, name, port, principal, type, userName, connectType, note, other, password);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDataSourceUsingPOSTRequestBuilder(String database, String host, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    // verify the required parameter 'database' is set
    if (database == null) {
      throw new ApiException(400, "Missing the required parameter 'database' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'host' is set
    if (host == null) {
      throw new ApiException(400, "Missing the required parameter 'host' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'port' is set
    if (port == null) {
      throw new ApiException(400, "Missing the required parameter 'port' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'principal' is set
    if (principal == null) {
      throw new ApiException(400, "Missing the required parameter 'principal' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createDataSourceUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling createDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connectType", connectType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note", note));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("other", other));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("password", password));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port", port));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("principal", principal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createDirctory
   * 创建资源
   * @param currentDir currentDir (required)
   * @param name 资源文件名称 (required)
   * @param pid pid (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createDirectoryUsingPOST(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createDirectoryUsingPOSTWithHttpInfo(currentDir, name, pid, type, description);
    return localVarResponse.getData();
  }

  /**
   * createDirctory
   * 创建资源
   * @param currentDir currentDir (required)
   * @param name 资源文件名称 (required)
   * @param pid pid (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createDirectoryUsingPOSTWithHttpInfo(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDirectoryUsingPOSTRequestBuilder(currentDir, name, pid, type, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createDirectoryUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDirectoryUsingPOSTRequestBuilder(String currentDir, String name, Integer pid, Object type, String description) throws ApiException {
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling createDirectoryUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createDirectoryUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/directory/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * save
   * 创建流程定义
   * @param connects 流程定义节点图标连接信息(json格式) (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param processDefinitionJson 流程定义详细信息(json格式) (required)
   * @param projectName 项目名称 (required)
   * @param description 流程定义描述信息 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createProcessDefinitionUsingPOST(String connects, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createProcessDefinitionUsingPOSTWithHttpInfo(connects, locations, name, processDefinitionJson, projectName, description);
    return localVarResponse.getData();
  }

  /**
   * save
   * 创建流程定义
   * @param connects 流程定义节点图标连接信息(json格式) (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param processDefinitionJson 流程定义详细信息(json格式) (required)
   * @param projectName 项目名称 (required)
   * @param description 流程定义描述信息 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createProcessDefinitionUsingPOSTWithHttpInfo(String connects, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProcessDefinitionUsingPOSTRequestBuilder(connects, locations, name, processDefinitionJson, projectName, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProcessDefinitionUsingPOSTRequestBuilder(String connects, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    // verify the required parameter 'connects' is set
    if (connects == null) {
      throw new ApiException(400, "Missing the required parameter 'connects' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'locations' is set
    if (locations == null) {
      throw new ApiException(400, "Missing the required parameter 'locations' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'processDefinitionJson' is set
    if (processDefinitionJson == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionJson' when calling createProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling createProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/save"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connects", connects));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionJson", processDefinitionJson));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createProject
   * 创建项目
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createProjectUsingPOST(String description, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = createProjectUsingPOSTWithHttpInfo(description, projectName);
    return localVarResponse.getData();
  }

  /**
   * createProject
   * 创建项目
   * @param description 项目描述 (optional)
   * @param projectName 项目名称 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createProjectUsingPOSTWithHttpInfo(String description, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProjectUsingPOSTRequestBuilder(description, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createProjectUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProjectUsingPOSTRequestBuilder(String description, String projectName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectName", projectName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createQueue
   * 创建队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createQueueUsingPOST(String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = createQueueUsingPOSTWithHttpInfo(queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * createQueue
   * 创建队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createQueueUsingPOSTWithHttpInfo(String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createQueueUsingPOSTRequestBuilder(queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createQueueUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createQueueUsingPOSTRequestBuilder(String queue, String queueName) throws ApiException {
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling createQueueUsingPOST");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling createQueueUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queue/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createResource
   * 创建资源
   * @param currentDir currentDir (required)
   * @param name 资源文件名称 (required)
   * @param pid pid (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createResourceUsingPOST(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createResourceUsingPOSTWithHttpInfo(currentDir, name, pid, type, file, description);
    return localVarResponse.getData();
  }

  /**
   * createResource
   * 创建资源
   * @param currentDir currentDir (required)
   * @param name 资源文件名称 (required)
   * @param pid pid (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createResourceUsingPOSTWithHttpInfo(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createResourceUsingPOSTRequestBuilder(currentDir, name, pid, type, file, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createResourceUsingPOSTRequestBuilder(String currentDir, String name, Integer pid, Object type, Object file, String description) throws ApiException {
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createResourceUsingPOST");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling createResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createSchedule
   * 创建定时
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createScheduleUsingPOST(Integer processDefinitionId, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = createScheduleUsingPOSTWithHttpInfo(processDefinitionId, projectName, failureStrategy, processInstancePriority, receivers, receiversCc, schedule, warningGroupId, warningType, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * createSchedule
   * 创建定时
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createScheduleUsingPOSTWithHttpInfo(Integer processDefinitionId, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createScheduleUsingPOSTRequestBuilder(processDefinitionId, projectName, failureStrategy, processInstancePriority, receivers, receiversCc, schedule, warningGroupId, warningType, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createScheduleUsingPOSTRequestBuilder(Integer processDefinitionId, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    // verify the required parameter 'processDefinitionId' is set
    if (processDefinitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionId' when calling createScheduleUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling createScheduleUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/create"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receivers", receivers));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receiversCc", receiversCc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createTenant
   * 创建租户
   * @param queueId 队列ID (required)
   * @param tenantCode 租户编码 (required)
   * @param tenantName 租户名称 (required)
   * @param description 租户描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createTenantUsingPOST(Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createTenantUsingPOSTWithHttpInfo(queueId, tenantCode, tenantName, description);
    return localVarResponse.getData();
  }

  /**
   * createTenant
   * 创建租户
   * @param queueId 队列ID (required)
   * @param tenantCode 租户编码 (required)
   * @param tenantName 租户名称 (required)
   * @param description 租户描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createTenantUsingPOSTWithHttpInfo(Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTenantUsingPOSTRequestBuilder(queueId, tenantCode, tenantName, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createTenantUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTenantUsingPOSTRequestBuilder(Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling createTenantUsingPOST");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling createTenantUsingPOST");
    }
    // verify the required parameter 'tenantName' is set
    if (tenantName == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantName' when calling createTenantUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueId", queueId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantName", tenantName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createUdfFunc
   * 创建UDF函数
   * @param className className (required)
   * @param funcName 函数名称 (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createUdfFuncUsingPOST(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = createUdfFuncUsingPOSTWithHttpInfo(className, funcName, resourceId, type, argTypes, database, description);
    return localVarResponse.getData();
  }

  /**
   * createUdfFunc
   * 创建UDF函数
   * @param className className (required)
   * @param funcName 函数名称 (required)
   * @param resourceId 资源ID (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createUdfFuncUsingPOSTWithHttpInfo(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUdfFuncUsingPOSTRequestBuilder(className, funcName, resourceId, type, argTypes, database, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createUdfFuncUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUdfFuncUsingPOSTRequestBuilder(String className, String funcName, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    // verify the required parameter 'className' is set
    if (className == null) {
      throw new ApiException(400, "Missing the required parameter 'className' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'funcName' is set
    if (funcName == null) {
      throw new ApiException(400, "Missing the required parameter 'funcName' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceId' when calling createUdfFuncUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling createUdfFuncUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("argTypes", argTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("className", className));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("funcName", funcName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resourceId", resourceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * createUser
   * 创建用户
   * @param email 邮箱 (optional)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param tenantId 租户ID (optional)
   * @param userName 用户名 (optional)
   * @param userPassword 用户密码 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result createUserUsingPOST(Integer email, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {
    ApiResponse<Result> localVarResponse = createUserUsingPOSTWithHttpInfo(email, phone, queue, tenantId, userName, userPassword);
    return localVarResponse.getData();
  }

  /**
   * createUser
   * 创建用户
   * @param email 邮箱 (optional)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param tenantId 租户ID (optional)
   * @param userName 用户名 (optional)
   * @param userPassword 用户密码 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> createUserUsingPOSTWithHttpInfo(Integer email, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserUsingPOSTRequestBuilder(email, phone, queue, tenantId, userName, userPassword);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("createUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserUsingPOSTRequestBuilder(Integer email, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delAlertgroupById
   * 删除告警组通过ID
   * @param id 报警组ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result delAlertgroupByIdUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = delAlertgroupByIdUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * delAlertgroupById
   * 删除告警组通过ID
   * @param id 报警组ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> delAlertgroupByIdUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = delAlertgroupByIdUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("delAlertgroupByIdUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder delAlertgroupByIdUsingPOSTRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling delAlertgroupByIdUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delUserById
   * 删除用户通过ID
   * @param id 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result delUserByIdUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = delUserByIdUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * delUserById
   * 删除用户通过ID
   * @param id 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> delUserByIdUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = delUserByIdUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("delUserByIdUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder delUserByIdUsingPOSTRequestBuilder(Integer id) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteProcessDefinitionById
   * 删除流程定义通过流程定义ID
   * @param projectName 项目名称 (required)
   * @param processDefinitionId 流程定义ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProcessDefinitionByIdUsingGET(String projectName, Integer processDefinitionId) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProcessDefinitionByIdUsingGETWithHttpInfo(projectName, processDefinitionId);
    return localVarResponse.getData();
  }

  /**
   * deleteProcessDefinitionById
   * 删除流程定义通过流程定义ID
   * @param projectName 项目名称 (required)
   * @param processDefinitionId 流程定义ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProcessDefinitionByIdUsingGETWithHttpInfo(String projectName, Integer processDefinitionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProcessDefinitionByIdUsingGETRequestBuilder(projectName, processDefinitionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProcessDefinitionByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProcessDefinitionByIdUsingGETRequestBuilder(String projectName, Integer processDefinitionId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling deleteProcessDefinitionByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/delete"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteProcessInstanceById
   * 删除流程实例通过流程实例ID
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProcessInstanceByIdUsingGET(String projectName, Integer processInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProcessInstanceByIdUsingGETWithHttpInfo(projectName, processInstanceId);
    return localVarResponse.getData();
  }

  /**
   * deleteProcessInstanceById
   * 删除流程实例通过流程实例ID
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProcessInstanceByIdUsingGETWithHttpInfo(String projectName, Integer processInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProcessInstanceByIdUsingGETRequestBuilder(projectName, processInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProcessInstanceByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProcessInstanceByIdUsingGETRequestBuilder(String projectName, Integer processInstanceId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling deleteProcessInstanceByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/delete"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteProjectById
   * 删除项目通过ID
   * @param projectId 项目ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteProjectUsingGET(Integer projectId) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteProjectUsingGETWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * deleteProjectById
   * 删除项目通过ID
   * @param projectId 项目ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteProjectUsingGETWithHttpInfo(Integer projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProjectUsingGETRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteProjectUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProjectUsingGETRequestBuilder(Integer projectId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteResource
   * 删除资源通过ID
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteResourceUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteResourceUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteResource
   * 删除资源通过ID
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteResourceUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteResourceUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteResourceUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteScheduleById
   * 定时下线
   * @param projectName projectName (required)
   * @param scheduleId 定时ID (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteScheduleByIdUsingGET(String projectName, Integer scheduleId, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteScheduleByIdUsingGETWithHttpInfo(projectName, scheduleId, alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * deleteScheduleById
   * 定时下线
   * @param projectName projectName (required)
   * @param scheduleId 定时ID (required)
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteScheduleByIdUsingGETWithHttpInfo(String projectName, Integer scheduleId, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteScheduleByIdUsingGETRequestBuilder(projectName, scheduleId, alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteScheduleByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteScheduleByIdUsingGETRequestBuilder(String projectName, Integer scheduleId, String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling deleteScheduleByIdUsingGET");
    }
    // verify the required parameter 'scheduleId' is set
    if (scheduleId == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduleId' when calling deleteScheduleByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/delete"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleId", scheduleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantName", tenantName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteTenantById
   * 删除租户
   * @param id id (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteTenantByIdUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteTenantByIdUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteTenantById
   * 删除租户
   * @param id id (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteTenantByIdUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTenantByIdUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteTenantByIdUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTenantByIdUsingPOSTRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteTenantByIdUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * deleteUdfFunc
   * 删除UDF函数
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteUdfFuncUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteUdfFuncUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * deleteUdfFunc
   * 删除UDF函数
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteUdfFuncUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUdfFuncUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteUdfFuncUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUdfFuncUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUdfFuncUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * delete
   * 删除数据源
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result deleteUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = deleteUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * delete
   * 删除数据源
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> deleteUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("deleteUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/delete";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * downloadResource
   * 下载资源文件
   * @param id 资源ID (required)
   * @return ResponseEntity
   * @throws ApiException if fails to make API call
   */
  public ResponseEntity downloadResourceUsingGET(Integer id) throws ApiException {
    ApiResponse<ResponseEntity> localVarResponse = downloadResourceUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * downloadResource
   * 下载资源文件
   * @param id 资源ID (required)
   * @return ApiResponse&lt;ResponseEntity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResponseEntity> downloadResourceUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadResourceUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("downloadResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<ResponseEntity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseEntity>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadResourceUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling downloadResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/download";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * downloadTaskLog
   * 下载任务实例日志
   * @param taskInstanceId 任务实例ID (optional)
   * @return ResponseEntity
   * @throws ApiException if fails to make API call
   */
  public ResponseEntity downloadTaskLogUsingGET(Integer taskInstanceId) throws ApiException {
    ApiResponse<ResponseEntity> localVarResponse = downloadTaskLogUsingGETWithHttpInfo(taskInstanceId);
    return localVarResponse.getData();
  }

  /**
   * downloadTaskLog
   * 下载任务实例日志
   * @param taskInstanceId 任务实例ID (optional)
   * @return ApiResponse&lt;ResponseEntity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ResponseEntity> downloadTaskLogUsingGETWithHttpInfo(Integer taskInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadTaskLogUsingGETRequestBuilder(taskInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("downloadTaskLogUsingGET", localVarResponse);
      }
      return new ApiResponse<ResponseEntity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseEntity>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadTaskLogUsingGETRequestBuilder(Integer taskInstanceId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/log/download-log";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskInstanceId", taskInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * execute
   * 执行流程实例的各种操作(暂停、停止、重跑、恢复等)
   * @param executeType 执行类型 (required)
   * @param processInstanceId 流程实例ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result executeUsingPOST(Object executeType, Integer processInstanceId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = executeUsingPOSTWithHttpInfo(executeType, processInstanceId, projectName);
    return localVarResponse.getData();
  }

  /**
   * execute
   * 执行流程实例的各种操作(暂停、停止、重跑、恢复等)
   * @param executeType 执行类型 (required)
   * @param processInstanceId 流程实例ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> executeUsingPOSTWithHttpInfo(Object executeType, Integer processInstanceId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeUsingPOSTRequestBuilder(executeType, processInstanceId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("executeUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeUsingPOSTRequestBuilder(Object executeType, Integer processInstanceId, String projectName) throws ApiException {
    // verify the required parameter 'executeType' is set
    if (executeType == null) {
      throw new ApiException(400, "Missing the required parameter 'executeType' when calling executeUsingPOST");
    }
    // verify the required parameter 'processInstanceId' is set
    if (processInstanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstanceId' when calling executeUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling executeUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/executors/execute"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executeType", executeType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getKerberosStartupState
   * 获取用户信息
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getKerberosStartupStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = getKerberosStartupStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * getKerberosStartupState
   * 获取用户信息
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getKerberosStartupStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getKerberosStartupStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getKerberosStartupStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getKerberosStartupStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/kerberos-startup-state";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getNodeListByDefinitionIdList
   * 获得任务节点列表通过流程定义ID
   * @param processDefinitionIdList 流程定义id列表 (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getNodeListByDefinitionIdListUsingGET(String processDefinitionIdList, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = getNodeListByDefinitionIdListUsingGETWithHttpInfo(processDefinitionIdList, projectName);
    return localVarResponse.getData();
  }

  /**
   * getNodeListByDefinitionIdList
   * 获得任务节点列表通过流程定义ID
   * @param processDefinitionIdList 流程定义id列表 (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getNodeListByDefinitionIdListUsingGETWithHttpInfo(String processDefinitionIdList, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNodeListByDefinitionIdListUsingGETRequestBuilder(processDefinitionIdList, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNodeListByDefinitionIdListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNodeListByDefinitionIdListUsingGETRequestBuilder(String processDefinitionIdList, String projectName) throws ApiException {
    // verify the required parameter 'processDefinitionIdList' is set
    if (processDefinitionIdList == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionIdList' when calling getNodeListByDefinitionIdListUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling getNodeListByDefinitionIdListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/get-task-list"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionIdList", processDefinitionIdList));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getNodeListByDefinitionId
   * 获得任务节点列表通过流程定义ID
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getNodeListByDefinitionIdUsingGET(Integer processDefinitionId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = getNodeListByDefinitionIdUsingGETWithHttpInfo(processDefinitionId, projectName);
    return localVarResponse.getData();
  }

  /**
   * getNodeListByDefinitionId
   * 获得任务节点列表通过流程定义ID
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getNodeListByDefinitionIdUsingGETWithHttpInfo(Integer processDefinitionId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNodeListByDefinitionIdUsingGETRequestBuilder(processDefinitionId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getNodeListByDefinitionIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNodeListByDefinitionIdUsingGETRequestBuilder(Integer processDefinitionId, String projectName) throws ApiException {
    // verify the required parameter 'processDefinitionId' is set
    if (processDefinitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionId' when calling getNodeListByDefinitionIdUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling getNodeListByDefinitionIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/gen-task-list"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * getUserInfo
   * 获取用户信息
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getUserInfoUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = getUserInfoUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * getUserInfo
   * 获取用户信息
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getUserInfoUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserInfoUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getUserInfoUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserInfoUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/get-user-info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantDataSource
   * 授权数据源
   * @param datasourceIds 数据源ID列表(字符串格式，多个数据源ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantDataSourceUsingPOST(String datasourceIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantDataSourceUsingPOSTWithHttpInfo(datasourceIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantDataSource
   * 授权数据源
   * @param datasourceIds 数据源ID列表(字符串格式，多个数据源ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantDataSourceUsingPOSTWithHttpInfo(String datasourceIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantDataSourceUsingPOSTRequestBuilder(datasourceIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantDataSourceUsingPOSTRequestBuilder(String datasourceIds, Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("datasourceIds", datasourceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantProject
   * 授权项目
   * @param projectIds 项目IDS(字符串格式，多个项目以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantProjectUsingPOST(String projectIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantProjectUsingPOSTWithHttpInfo(projectIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantProject
   * 授权项目
   * @param projectIds 项目IDS(字符串格式，多个项目以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantProjectUsingPOSTWithHttpInfo(String projectIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantProjectUsingPOSTRequestBuilder(projectIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantProjectUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantProjectUsingPOSTRequestBuilder(String projectIds, Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectIds", projectIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantResource
   * 授权资源文件
   * @param resourceIds 资源ID列表(字符串格式，多个资源ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantResourceUsingPOST(String resourceIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantResourceUsingPOSTWithHttpInfo(resourceIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantResource
   * 授权资源文件
   * @param resourceIds 资源ID列表(字符串格式，多个资源ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantResourceUsingPOSTWithHttpInfo(String resourceIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantResourceUsingPOSTRequestBuilder(resourceIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantResourceUsingPOSTRequestBuilder(String resourceIds, Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-file";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resourceIds", resourceIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantUDFFunc
   * 授权udf函数
   * @param udfIds udf函数id列表(字符串格式，多个udf函数ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantUDFFuncUsingPOST(String udfIds, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = grantUDFFuncUsingPOSTWithHttpInfo(udfIds, userId);
    return localVarResponse.getData();
  }

  /**
   * grantUDFFunc
   * 授权udf函数
   * @param udfIds udf函数id列表(字符串格式，多个udf函数ID以\&quot;,\&quot;分割) (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantUDFFuncUsingPOSTWithHttpInfo(String udfIds, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantUDFFuncUsingPOSTRequestBuilder(udfIds, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantUDFFuncUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantUDFFuncUsingPOSTRequestBuilder(String udfIds, Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/grant-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("udfIds", udfIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grantUser
   * 授权告警组
   * @param alertgroupId alertgroupId (required)
   * @param userIds 用户ID列表 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result grantUserUsingPOST(Integer alertgroupId, String userIds) throws ApiException {
    ApiResponse<Result> localVarResponse = grantUserUsingPOSTWithHttpInfo(alertgroupId, userIds);
    return localVarResponse.getData();
  }

  /**
   * grantUser
   * 授权告警组
   * @param alertgroupId alertgroupId (required)
   * @param userIds 用户ID列表 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> grantUserUsingPOSTWithHttpInfo(Integer alertgroupId, String userIds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantUserUsingPOSTRequestBuilder(alertgroupId, userIds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("grantUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantUserUsingPOSTRequestBuilder(Integer alertgroupId, String userIds) throws ApiException {
    // verify the required parameter 'alertgroupId' is set
    if (alertgroupId == null) {
      throw new ApiException(400, "Missing the required parameter 'alertgroupId' when calling grantUserUsingPOST");
    }
    // verify the required parameter 'userIds' is set
    if (userIds == null) {
      throw new ApiException(400, "Missing the required parameter 'userIds' when calling grantUserUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/grant-user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertgroupId", alertgroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userIds", userIds));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * importProcessDefinition
   * EXPORT_PROCESS_DEFINITION_NOTES
   * @param projectName projectName (required)
   * @param file 资源文件 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result importProcessDefinitionUsingPOST(String projectName, Object file) throws ApiException {
    ApiResponse<Result> localVarResponse = importProcessDefinitionUsingPOSTWithHttpInfo(projectName, file);
    return localVarResponse.getData();
  }

  /**
   * importProcessDefinition
   * EXPORT_PROCESS_DEFINITION_NOTES
   * @param projectName projectName (required)
   * @param file 资源文件 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> importProcessDefinitionUsingPOSTWithHttpInfo(String projectName, Object file) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = importProcessDefinitionUsingPOSTRequestBuilder(projectName, file);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("importProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder importProcessDefinitionUsingPOSTRequestBuilder(String projectName, Object file) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling importProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling importProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/import-definition";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectName", projectName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listAll
   * 
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listAllUsingGET(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    ApiResponse<Result> localVarResponse = listAllUsingGETWithHttpInfo(alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    return localVarResponse.getData();
  }

  /**
   * listAll
   * 
   * @param alertGroup  (optional)
   * @param createTime  (optional)
   * @param email  (optional)
   * @param id  (optional)
   * @param phone  (optional)
   * @param queue  (optional)
   * @param queueName  (optional)
   * @param tenantCode  (optional)
   * @param tenantId  (optional)
   * @param tenantName  (optional)
   * @param updateTime  (optional)
   * @param userName  (optional)
   * @param userPassword  (optional)
   * @param userType  (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listAllUsingGETWithHttpInfo(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAllUsingGETRequestBuilder(alertGroup, createTime, email, id, phone, queue, queueName, tenantCode, tenantId, tenantName, updateTime, userName, userPassword, userType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listAllUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAllUsingGETRequestBuilder(String alertGroup, OffsetDateTime createTime, String email, Integer id, String phone, String queue, String queueName, String tenantCode, Integer tenantId, String tenantName, OffsetDateTime updateTime, String userName, String userPassword, String userType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list-all";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertGroup", alertGroup));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createTime", createTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantName", tenantName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateTime", updateTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userType", userType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listMaster
   * master服务列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listMasterUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listMasterUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listMaster
   * master服务列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listMasterUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listMasterUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listMasterUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listMasterUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/master/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAlertGroupListPaging
   * 分页查询告警组列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = listPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryAlertGroupListPaging
   * 分页查询告警组列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listUser
   * 用户列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listUserUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listUserUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listUser
   * 用户列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listUserUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * list
   * 告警组列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * list
   * 告警组列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * listWorker
   * worker服务列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result listWorkerUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = listWorkerUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * listWorker
   * worker服务列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> listWorkerUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listWorkerUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("listWorkerUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listWorkerUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/worker/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * login
   * 用户登录
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result loginUsingPOST(String userName, String userPassword) throws ApiException {
    ApiResponse<Result> localVarResponse = loginUsingPOSTWithHttpInfo(userName, userPassword);
    return localVarResponse.getData();
  }

  /**
   * login
   * 用户登录
   * @param userName 用户名 (required)
   * @param userPassword 用户密码 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> loginUsingPOSTWithHttpInfo(String userName, String userPassword) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = loginUsingPOSTRequestBuilder(userName, userPassword);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("loginUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder loginUsingPOSTRequestBuilder(String userName, String userPassword) throws ApiException {
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling loginUsingPOST");
    }
    // verify the required parameter 'userPassword' is set
    if (userPassword == null) {
      throw new ApiException(400, "Missing the required parameter 'userPassword' when calling loginUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/login";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * offline
   * 定时下线
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result offlineUsingPOST(Integer id, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = offlineUsingPOSTWithHttpInfo(id, projectName);
    return localVarResponse.getData();
  }

  /**
   * offline
   * 定时下线
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> offlineUsingPOSTWithHttpInfo(Integer id, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = offlineUsingPOSTRequestBuilder(id, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("offlineUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder offlineUsingPOSTRequestBuilder(Integer id, String projectName) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling offlineUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling offlineUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/offline"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * onlineCreateResource
   * 在线创建资源
   * @param content 资源文件内容 (required)
   * @param currentDir currentDir (required)
   * @param fileName 资源文件名称 (required)
   * @param pid pid (required)
   * @param suffix 资源文件后缀 (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result onlineCreateResourceUsingPOST(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = onlineCreateResourceUsingPOSTWithHttpInfo(content, currentDir, fileName, pid, suffix, type, description);
    return localVarResponse.getData();
  }

  /**
   * onlineCreateResource
   * 在线创建资源
   * @param content 资源文件内容 (required)
   * @param currentDir currentDir (required)
   * @param fileName 资源文件名称 (required)
   * @param pid pid (required)
   * @param suffix 资源文件后缀 (required)
   * @param type 资源文件类型 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> onlineCreateResourceUsingPOSTWithHttpInfo(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onlineCreateResourceUsingPOSTRequestBuilder(content, currentDir, fileName, pid, suffix, type, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("onlineCreateResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onlineCreateResourceUsingPOSTRequestBuilder(String content, String currentDir, String fileName, Integer pid, String suffix, Object type, String description) throws ApiException {
    // verify the required parameter 'content' is set
    if (content == null) {
      throw new ApiException(400, "Missing the required parameter 'content' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'currentDir' is set
    if (currentDir == null) {
      throw new ApiException(400, "Missing the required parameter 'currentDir' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'pid' is set
    if (pid == null) {
      throw new ApiException(400, "Missing the required parameter 'pid' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'suffix' is set
    if (suffix == null) {
      throw new ApiException(400, "Missing the required parameter 'suffix' when calling onlineCreateResourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling onlineCreateResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/online-create";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("currentDir", currentDir));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fileName", fileName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pid", pid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("suffix", suffix));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * online
   * 定时上线
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result onlineUsingPOST(Integer id, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = onlineUsingPOSTWithHttpInfo(id, projectName);
    return localVarResponse.getData();
  }

  /**
   * online
   * 定时上线
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> onlineUsingPOSTWithHttpInfo(Integer id, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onlineUsingPOSTRequestBuilder(id, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("onlineUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onlineUsingPOSTRequestBuilder(Integer id, String projectName) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling onlineUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling onlineUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/online"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * previewSchedule
   * PREVIEW_SCHEDULE_NOTES
   * @param projectName 项目名称 (required)
   * @param schedule 定时 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result previewScheduleUsingPOST(String projectName, String schedule) throws ApiException {
    ApiResponse<Result> localVarResponse = previewScheduleUsingPOSTWithHttpInfo(projectName, schedule);
    return localVarResponse.getData();
  }

  /**
   * previewSchedule
   * PREVIEW_SCHEDULE_NOTES
   * @param projectName 项目名称 (required)
   * @param schedule 定时 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> previewScheduleUsingPOSTWithHttpInfo(String projectName, String schedule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = previewScheduleUsingPOSTRequestBuilder(projectName, schedule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("previewScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder previewScheduleUsingPOSTRequestBuilder(String projectName, String schedule) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling previewScheduleUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/preview"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAllProjectList
   * 查询所有项目
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAllProjectListUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryAllProjectListUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryAllProjectList
   * 查询所有项目
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAllProjectListUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAllProjectListUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAllProjectListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAllProjectListUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/query-project-list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryAuthorizedProject
   * 查询授权项目
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryAuthorizedProjectUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryAuthorizedProjectUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * queryAuthorizedProject
   * 查询授权项目
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryAuthorizedProjectUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryAuthorizedProjectUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryAuthorizedProjectUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryAuthorizedProjectUsingGETRequestBuilder(Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/authed-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSourceListPaging
   * 分页查询数据源列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryDataSourceListPaging
   * 分页查询数据源列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSourceList
   * 查询数据源列表通过数据源类型
   * @param type 数据源类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceListUsingGET(Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryDataSourceList
   * 查询数据源列表通过数据源类型
   * @param type 数据源类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryDataSourceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDataSource
   * 查询数据源通过ID
   * @param id 数据源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDataSourceUsingPOST(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = queryDataSourceUsingPOSTWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * queryDataSource
   * 查询数据源通过ID
   * @param id 数据源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDataSourceUsingPOSTWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDataSourceUsingPOSTRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDataSourceUsingPOSTRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/update-ui";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryDatabaseState
   * 查询数据库状态
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryDatabaseStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryDatabaseStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryDatabaseState
   * 查询数据库状态
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryDatabaseStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryDatabaseStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryDatabaseStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryDatabaseStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/database";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryList
   * 查询队列列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryListUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryListUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryList
   * 查询队列列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryListUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryListUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryListUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queue/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryLog
   * 查询任务实例日志
   * @param limit 显示多少条 (optional)
   * @param skipLineNum 忽略行数 (optional)
   * @param taskInstanceId 任务实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryLogUsingGET(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryLogUsingGETWithHttpInfo(limit, skipLineNum, taskInstanceId);
    return localVarResponse.getData();
  }

  /**
   * queryLog
   * 查询任务实例日志
   * @param limit 显示多少条 (optional)
   * @param skipLineNum 忽略行数 (optional)
   * @param taskInstanceId 任务实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryLogUsingGETWithHttpInfo(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryLogUsingGETRequestBuilder(limit, skipLineNum, taskInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryLogUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryLogUsingGETRequestBuilder(Integer limit, Integer skipLineNum, Integer taskInstanceId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/log/detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipLineNum", skipLineNum));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskInstanceId", taskInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryParentInstanceBySubId
   * 查询父流程实例信息通过子流程实例ID
   * @param projectName 项目名称 (required)
   * @param subId 子流程是咧ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryParentInstanceBySubIdUsingGET(String projectName, Integer subId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryParentInstanceBySubIdUsingGETWithHttpInfo(projectName, subId);
    return localVarResponse.getData();
  }

  /**
   * queryParentInstanceBySubId
   * 查询父流程实例信息通过子流程实例ID
   * @param projectName 项目名称 (required)
   * @param subId 子流程是咧ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryParentInstanceBySubIdUsingGETWithHttpInfo(String projectName, Integer subId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryParentInstanceBySubIdUsingGETRequestBuilder(projectName, subId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryParentInstanceBySubIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryParentInstanceBySubIdUsingGETRequestBuilder(String projectName, Integer subId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryParentInstanceBySubIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/select-parent-process"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subId", subId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionAllByProjectId
   * 查询流程定义通过项目ID
   * @param projectId projectId (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionAllByProjectIdUsingGET(Integer projectId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionAllByProjectIdUsingGETWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionAllByProjectId
   * 查询流程定义通过项目ID
   * @param projectId projectId (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionAllByProjectIdUsingGETWithHttpInfo(Integer projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionAllByProjectIdUsingGETRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionAllByProjectIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionAllByProjectIdUsingGETRequestBuilder(Integer projectId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling queryProcessDefinitionAllByProjectIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/queryProcessDefinitionAllByProjectId";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionById
   * 查询流程定义通过流程定义ID
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionByIdUsingGET(Integer processId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionByIdUsingGETWithHttpInfo(processId, projectName);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionById
   * 查询流程定义通过流程定义ID
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionByIdUsingGETWithHttpInfo(Integer processId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionByIdUsingGETRequestBuilder(processId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionByIdUsingGETRequestBuilder(Integer processId, String projectName) throws ApiException {
    // verify the required parameter 'processId' is set
    if (processId == null) {
      throw new ApiException(400, "Missing the required parameter 'processId' when calling queryProcessDefinitionByIdUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryProcessDefinitionByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/select-by-id"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processId", processId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionListPaging
   * 分页查询流程定义列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectName 项目名称 (required)
   * @param searchVal 搜索值 (optional)
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionListPagingUsingGET(Integer pageNo, Integer pageSize, String projectName, String searchVal, Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionListPagingUsingGETWithHttpInfo(pageNo, pageSize, projectName, searchVal, userId);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionListPaging
   * 分页查询流程定义列表
   * @param pageNo 页码号 (required)
   * @param pageSize 页大小 (required)
   * @param projectName 项目名称 (required)
   * @param searchVal 搜索值 (optional)
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String projectName, String searchVal, Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionListPagingUsingGETRequestBuilder(pageNo, pageSize, projectName, searchVal, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String projectName, String searchVal, Integer userId) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProcessDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProcessDefinitionListPagingUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryProcessDefinitionListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/list-paging"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessDefinitionList
   * 查询流程定义列表
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessDefinitionListUsingGET(String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessDefinitionListUsingGETWithHttpInfo(projectName);
    return localVarResponse.getData();
  }

  /**
   * queryProcessDefinitionList
   * 查询流程定义列表
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessDefinitionListUsingGETWithHttpInfo(String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessDefinitionListUsingGETRequestBuilder(projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessDefinitionListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessDefinitionListUsingGETRequestBuilder(String projectName) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryProcessDefinitionListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/list"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessInstanceById
   * 查询流程实例通过流程实例ID
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessInstanceByIdUsingGET(String projectName, Integer processInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessInstanceByIdUsingGETWithHttpInfo(projectName, processInstanceId);
    return localVarResponse.getData();
  }

  /**
   * queryProcessInstanceById
   * 查询流程实例通过流程实例ID
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessInstanceByIdUsingGETWithHttpInfo(String projectName, Integer processInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessInstanceByIdUsingGETRequestBuilder(projectName, processInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessInstanceByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessInstanceByIdUsingGETRequestBuilder(String projectName, Integer processInstanceId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryProcessInstanceByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/select-by-id"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProcessInstanceList
   * 查询流程实例列表
   * @param projectName 项目名称 (required)
   * @param endDate 结束时间 (optional)
   * @param executorName EXECUTOR_NAME (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param processDefinitionId 流程定义ID (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProcessInstanceListUsingGET(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processDefinitionId, String searchVal, String startDate, String stateType) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProcessInstanceListUsingGETWithHttpInfo(projectName, endDate, executorName, host, pageNo, pageSize, processDefinitionId, searchVal, startDate, stateType);
    return localVarResponse.getData();
  }

  /**
   * queryProcessInstanceList
   * 查询流程实例列表
   * @param projectName 项目名称 (required)
   * @param endDate 结束时间 (optional)
   * @param executorName EXECUTOR_NAME (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param processDefinitionId 流程定义ID (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProcessInstanceListUsingGETWithHttpInfo(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processDefinitionId, String searchVal, String startDate, String stateType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProcessInstanceListUsingGETRequestBuilder(projectName, endDate, executorName, host, pageNo, pageSize, processDefinitionId, searchVal, startDate, stateType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProcessInstanceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProcessInstanceListUsingGETRequestBuilder(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processDefinitionId, String searchVal, String startDate, String stateType) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryProcessInstanceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/list-paging"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorName", executorName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stateType", stateType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProjectById
   * 通过项目ID查询项目信息
   * @param projectId 项目ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProjectByIdUsingGET(Integer projectId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProjectByIdUsingGETWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * queryProjectById
   * 通过项目ID查询项目信息
   * @param projectId 项目ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProjectByIdUsingGETWithHttpInfo(Integer projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProjectByIdUsingGETRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProjectByIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProjectByIdUsingGETRequestBuilder(Integer projectId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/query-by-id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryProjectListPaging
   * 分页查询项目列表
   * @param pageNo pageNo (required)
   * @param pageSize pageSize (required)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryProjectListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryProjectListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryProjectListPaging
   * 分页查询项目列表
   * @param pageNo pageNo (required)
   * @param pageSize pageSize (required)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryProjectListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryProjectListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryProjectListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryProjectListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'pageNo' is set
    if (pageNo == null) {
      throw new ApiException(400, "Missing the required parameter 'pageNo' when calling queryProjectListPagingUsingGET");
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
      throw new ApiException(400, "Missing the required parameter 'pageSize' when calling queryProjectListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryQueueListPaging
   * 分页查询队列列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryQueueListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryQueueListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryQueueListPaging
   * 分页查询队列列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryQueueListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryQueueListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryQueueListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryQueueListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queue/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceByProgramType
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @param programType programType (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceJarListUsingGET(Object type, String programType) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceJarListUsingGETWithHttpInfo(type, programType);
    return localVarResponse.getData();
  }

  /**
   * queryResourceByProgramType
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @param programType programType (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceJarListUsingGETWithHttpInfo(Object type, String programType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceJarListUsingGETRequestBuilder(type, programType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceJarListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceJarListUsingGETRequestBuilder(Object type, String programType) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceJarListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/list/jar";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("programType", programType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceListPaging
   * QUERY_RESOURCE_LIST_PAGING_NOTES
   * @param id 资源ID (required)
   * @param type 资源文件类型 (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceListPagingUsingGET(Integer id, Object type, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceListPagingUsingGETWithHttpInfo(id, type, pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryResourceListPaging
   * QUERY_RESOURCE_LIST_PAGING_NOTES
   * @param id 资源ID (required)
   * @param type 资源文件类型 (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceListPagingUsingGETWithHttpInfo(Integer id, Object type, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceListPagingUsingGETRequestBuilder(id, type, pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceListPagingUsingGETRequestBuilder(Integer id, Object type, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling queryResourceListPagingUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResourceList
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceListUsingGET(Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryResourceList
   * 查询资源列表
   * @param type 资源文件类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryResource
   * QUERY_BY_RESOURCE_NAME
   * @param fullName RESOURCE_FULL_NAME (required)
   * @param type 资源文件类型 (required)
   * @param id id (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryResourceUsingGET(String fullName, Object type, Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = queryResourceUsingGETWithHttpInfo(fullName, type, id);
    return localVarResponse.getData();
  }

  /**
   * queryResource
   * QUERY_BY_RESOURCE_NAME
   * @param fullName RESOURCE_FULL_NAME (required)
   * @param type 资源文件类型 (required)
   * @param id id (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryResourceUsingGETWithHttpInfo(String fullName, Object type, Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryResourceUsingGETRequestBuilder(fullName, type, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryResourceUsingGETRequestBuilder(String fullName, Object type, Integer id) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling queryResourceUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/queryResource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fullName", fullName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryScheduleListPaging
   * 分页查询定时
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryScheduleListPagingUsingGET(Integer processDefinitionId, String projectName, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryScheduleListPagingUsingGETWithHttpInfo(processDefinitionId, projectName, pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryScheduleListPaging
   * 分页查询定时
   * @param processDefinitionId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryScheduleListPagingUsingGETWithHttpInfo(Integer processDefinitionId, String projectName, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryScheduleListPagingUsingGETRequestBuilder(processDefinitionId, projectName, pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryScheduleListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryScheduleListPagingUsingGETRequestBuilder(Integer processDefinitionId, String projectName, Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    // verify the required parameter 'processDefinitionId' is set
    if (processDefinitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionId' when calling queryScheduleListPagingUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryScheduleListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/list-paging"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryScheduleList
   * 查询定时列表
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryScheduleListUsingPOST(String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = queryScheduleListUsingPOSTWithHttpInfo(projectName);
    return localVarResponse.getData();
  }

  /**
   * queryScheduleList
   * 查询定时列表
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryScheduleListUsingPOSTWithHttpInfo(String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryScheduleListUsingPOSTRequestBuilder(projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryScheduleListUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryScheduleListUsingPOSTRequestBuilder(String projectName) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryScheduleListUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/list"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * querySubProcessInstanceByTaskId
   * 查询子流程实例通过任务实例ID
   * @param projectName 项目名称 (required)
   * @param taskId 任务实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result querySubProcessInstanceByTaskIdUsingGET(String projectName, Integer taskId) throws ApiException {
    ApiResponse<Result> localVarResponse = querySubProcessInstanceByTaskIdUsingGETWithHttpInfo(projectName, taskId);
    return localVarResponse.getData();
  }

  /**
   * querySubProcessInstanceByTaskId
   * 查询子流程实例通过任务实例ID
   * @param projectName 项目名称 (required)
   * @param taskId 任务实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> querySubProcessInstanceByTaskIdUsingGETWithHttpInfo(String projectName, Integer taskId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = querySubProcessInstanceByTaskIdUsingGETRequestBuilder(projectName, taskId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("querySubProcessInstanceByTaskIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder querySubProcessInstanceByTaskIdUsingGETRequestBuilder(String projectName, Integer taskId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling querySubProcessInstanceByTaskIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/select-sub-process"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskId", taskId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskListByProcessId
   * 通过流程实例ID查询任务列表
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskListByProcessIdUsingGET(String projectName, Integer processInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskListByProcessIdUsingGETWithHttpInfo(projectName, processInstanceId);
    return localVarResponse.getData();
  }

  /**
   * queryTaskListByProcessId
   * 通过流程实例ID查询任务列表
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskListByProcessIdUsingGETWithHttpInfo(String projectName, Integer processInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskListByProcessIdUsingGETRequestBuilder(projectName, processInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskListByProcessIdUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskListByProcessIdUsingGETRequestBuilder(String projectName, Integer processInstanceId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryTaskListByProcessIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/task-list-by-process-id"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTaskListPaging
   * QUERY_TASK_INSTANCE_LIST_PAGING_NOTES
   * @param projectName 项目名称 (required)
   * @param endDate 结束时间 (optional)
   * @param executorName EXECUTOR_NAME (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @param taskName 任务实例名 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTaskListPagingUsingGET(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processInstanceId, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTaskListPagingUsingGETWithHttpInfo(projectName, endDate, executorName, host, pageNo, pageSize, processInstanceId, searchVal, startDate, stateType, taskName);
    return localVarResponse.getData();
  }

  /**
   * queryTaskListPaging
   * QUERY_TASK_INSTANCE_LIST_PAGING_NOTES
   * @param projectName 项目名称 (required)
   * @param endDate 结束时间 (optional)
   * @param executorName EXECUTOR_NAME (optional)
   * @param host 运行任务的主机IP地址 (optional)
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param searchVal 搜索值 (optional)
   * @param startDate 开始时间 (optional)
   * @param stateType 工作流和任务节点的运行状态 (optional)
   * @param taskName 任务实例名 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTaskListPagingUsingGETWithHttpInfo(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processInstanceId, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTaskListPagingUsingGETRequestBuilder(projectName, endDate, executorName, host, pageNo, pageSize, processInstanceId, searchVal, startDate, stateType, taskName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTaskListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTaskListPagingUsingGETRequestBuilder(String projectName, String endDate, String executorName, String host, Integer pageNo, Integer pageSize, Integer processInstanceId, String searchVal, String startDate, String stateType, String taskName) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling queryTaskListPagingUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/task-instance/list-paging"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorName", executorName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stateType", stateType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskName", taskName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTenantlistPaging
   * 分页查询租户列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTenantlistPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryTenantlistPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryTenantlistPaging
   * 分页查询租户列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTenantlistPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTenantlistPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTenantlistPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTenantlistPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryTenantlist
   * 查询租户列表
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryTenantlistUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryTenantlistUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryTenantlist
   * 查询租户列表
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryTenantlistUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryTenantlistUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryTenantlistUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryTenantlistUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUdfFuncListPaging
   * 分页查询udf函数列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUdfFuncListPagingUsingGET(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUdfFuncListPagingUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryUdfFuncListPaging
   * 分页查询udf函数列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUdfFuncListPagingUsingGETWithHttpInfo(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUdfFuncListPagingUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUdfFuncListPagingUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUdfFuncListPagingUsingGETRequestBuilder(Integer pageNo, Integer pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUdfFuncList
   * QUERY_UDF_FUNC_LIST_NOTES
   * @param type UDF类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUdfFuncListUsingGET(Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUdfFuncListUsingGETWithHttpInfo(type);
    return localVarResponse.getData();
  }

  /**
   * queryUdfFuncList
   * QUERY_UDF_FUNC_LIST_NOTES
   * @param type UDF类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUdfFuncListUsingGETWithHttpInfo(Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUdfFuncListUsingGETRequestBuilder(type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUdfFuncListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUdfFuncListUsingGETRequestBuilder(Object type) throws ApiException {
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling queryUdfFuncListUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUnauthorizedProject
   * 查询未授权的项目
   * @param userId 用户ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUnauthorizedProjectUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUnauthorizedProjectUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * queryUnauthorizedProject
   * 查询未授权的项目
   * @param userId 用户ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUnauthorizedProjectUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUnauthorizedProjectUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUnauthorizedProjectUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUnauthorizedProjectUsingGETRequestBuilder(Integer userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/unauth-project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryUserList
   * 查询用户列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryUserListUsingGET(Integer pageNo, String pageSize, String searchVal) throws ApiException {
    ApiResponse<Result> localVarResponse = queryUserListUsingGETWithHttpInfo(pageNo, pageSize, searchVal);
    return localVarResponse.getData();
  }

  /**
   * queryUserList
   * 查询用户列表
   * @param pageNo 页码号 (optional)
   * @param pageSize 页大小 (optional)
   * @param searchVal 搜索值 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryUserListUsingGETWithHttpInfo(Integer pageNo, String pageSize, String searchVal) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryUserListUsingGETRequestBuilder(pageNo, pageSize, searchVal);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryUserListUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryUserListUsingGETRequestBuilder(Integer pageNo, String pageSize, String searchVal) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/list-paging";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNo", pageNo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchVal", searchVal));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * queryZookeeperState
   * 查询Zookeeper状态
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result queryZookeeperStateUsingGET() throws ApiException {
    ApiResponse<Result> localVarResponse = queryZookeeperStateUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * queryZookeeperState
   * 查询Zookeeper状态
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> queryZookeeperStateUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryZookeeperStateUsingGETRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("queryZookeeperStateUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryZookeeperStateUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/monitor/zookeeper/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * releaseProcessDefinition
   * 发布流程定义
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param releaseState 流程定义节点图标连接信息(json格式) (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result releaseProcessDefinitionUsingPOST(Integer processId, String projectName, Integer releaseState) throws ApiException {
    ApiResponse<Result> localVarResponse = releaseProcessDefinitionUsingPOSTWithHttpInfo(processId, projectName, releaseState);
    return localVarResponse.getData();
  }

  /**
   * releaseProcessDefinition
   * 发布流程定义
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @param releaseState 流程定义节点图标连接信息(json格式) (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> releaseProcessDefinitionUsingPOSTWithHttpInfo(Integer processId, String projectName, Integer releaseState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = releaseProcessDefinitionUsingPOSTRequestBuilder(processId, projectName, releaseState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("releaseProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder releaseProcessDefinitionUsingPOSTRequestBuilder(Integer processId, String projectName, Integer releaseState) throws ApiException {
    // verify the required parameter 'processId' is set
    if (processId == null) {
      throw new ApiException(400, "Missing the required parameter 'processId' when calling releaseProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling releaseProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'releaseState' is set
    if (releaseState == null) {
      throw new ApiException(400, "Missing the required parameter 'releaseState' when calling releaseProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/release"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processId", processId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releaseState", releaseState));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * signOut
   * 退出登录
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result signOutUsingPOST() throws ApiException {
    ApiResponse<Result> localVarResponse = signOutUsingPOSTWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * signOut
   * 退出登录
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> signOutUsingPOSTWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = signOutUsingPOSTRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("signOutUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder signOutUsingPOSTRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/signOut";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * startCheckProcessDefinition
   * 检查流程定义
   * @param processDefinitionId 流程定义ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result startCheckProcessDefinitionUsingPOST(Integer processDefinitionId,String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = startCheckProcessDefinitionUsingPOSTWithHttpInfo(processDefinitionId,projectName);
    return localVarResponse.getData();
  }

  /**
   * startCheckProcessDefinition
   * 检查流程定义
   * @param processDefinitionId 流程定义ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> startCheckProcessDefinitionUsingPOSTWithHttpInfo(Integer processDefinitionId,String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startCheckProcessDefinitionUsingPOSTRequestBuilder(processDefinitionId,projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("startCheckProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startCheckProcessDefinitionUsingPOSTRequestBuilder(Integer processDefinitionId,String projectName) throws ApiException {
    // verify the required parameter 'processDefinitionId' is set
    if (processDefinitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionId' when calling startCheckProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/executors/start-check".replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * startProcessInstance
   * 运行流程实例
   * @param failureStrategy 失败策略 (required)
   * @param processDefinitionId 流程定义ID (required)
   * @param processInstancePriority 流程实例优先级 (required)
   * @param projectName 项目名称 (required)
   * @param scheduleTime 定时时间 (required)
   * @param warningGroupId 发送组ID (required)
   * @param warningType 发送策略 (required)
   * @param execType 指令类型 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param runMode 运行模式 (optional)
   * @param startNodeList 开始节点列表(节点name) (optional)
   * @param taskDependType 任务依赖类型 (optional)
   * @param timeout 超时时间 (optional)
   * @param workerGroup WORKER_GROUP (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result startProcessInstanceUsingPOST(Object failureStrategy, Integer processDefinitionId, Object processInstancePriority, String projectName, String scheduleTime, Integer warningGroupId, Object warningType, Object execType, String receivers, String receiversCc, Object runMode, String startNodeList, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = startProcessInstanceUsingPOSTWithHttpInfo(failureStrategy, processDefinitionId, processInstancePriority, projectName, scheduleTime, warningGroupId, warningType, execType, receivers, receiversCc, runMode, startNodeList, taskDependType, timeout, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * startProcessInstance
   * 运行流程实例
   * @param failureStrategy 失败策略 (required)
   * @param processDefinitionId 流程定义ID (required)
   * @param processInstancePriority 流程实例优先级 (required)
   * @param projectName 项目名称 (required)
   * @param scheduleTime 定时时间 (required)
   * @param warningGroupId 发送组ID (required)
   * @param warningType 发送策略 (required)
   * @param execType 指令类型 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param runMode 运行模式 (optional)
   * @param startNodeList 开始节点列表(节点name) (optional)
   * @param taskDependType 任务依赖类型 (optional)
   * @param timeout 超时时间 (optional)
   * @param workerGroup WORKER_GROUP (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> startProcessInstanceUsingPOSTWithHttpInfo(Object failureStrategy, Integer processDefinitionId, Object processInstancePriority, String projectName, String scheduleTime, Integer warningGroupId, Object warningType, Object execType, String receivers, String receiversCc, Object runMode, String startNodeList, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startProcessInstanceUsingPOSTRequestBuilder(failureStrategy, processDefinitionId, processInstancePriority, projectName, scheduleTime, warningGroupId, warningType, execType, receivers, receiversCc, runMode, startNodeList, taskDependType, timeout, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("startProcessInstanceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startProcessInstanceUsingPOSTRequestBuilder(Object failureStrategy, Integer processDefinitionId, Object processInstancePriority, String projectName, String scheduleTime, Integer warningGroupId, Object warningType, Object execType, String receivers, String receiversCc, Object runMode, String startNodeList, Object taskDependType, Integer timeout, String workerGroup) throws ApiException {
    // verify the required parameter 'failureStrategy' is set
    if (failureStrategy == null) {
      throw new ApiException(400, "Missing the required parameter 'failureStrategy' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'processDefinitionId' is set
    if (processDefinitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionId' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'processInstancePriority' is set
    if (processInstancePriority == null) {
      throw new ApiException(400, "Missing the required parameter 'processInstancePriority' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'scheduleTime' is set
    if (scheduleTime == null) {
      throw new ApiException(400, "Missing the required parameter 'scheduleTime' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'warningGroupId' is set
    if (warningGroupId == null) {
      throw new ApiException(400, "Missing the required parameter 'warningGroupId' when calling startProcessInstanceUsingPOST");
    }
    // verify the required parameter 'warningType' is set
    if (warningType == null) {
      throw new ApiException(400, "Missing the required parameter 'warningType' when calling startProcessInstanceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/executors/start-process-instance"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("execType", execType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionId", processDefinitionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receivers", receivers));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receiversCc", receiversCc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("runMode", runMode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleTime", scheduleTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startNodeList", startNodeList));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("taskDependType", taskDependType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeout", timeout));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthDatasource
   * 未授权的数据源
   * @param userId 用户ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result unauthDatasourceUsingGET(Integer userId) throws ApiException {
    ApiResponse<Result> localVarResponse = unauthDatasourceUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * unauthDatasource
   * 未授权的数据源
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> unauthDatasourceUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthDatasourceUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthDatasourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthDatasourceUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling unauthDatasourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/unauth-datasource";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthUDFFunc
   * 取消udf函数授权
   * @param userId 用户ID (required)
   * @throws ApiException if fails to make API call
   */
  public void unauthUDFFuncUsingGET(Integer userId) throws ApiException {
    unauthUDFFuncUsingGETWithHttpInfo(userId);
  }

  /**
   * unauthUDFFunc
   * 取消udf函数授权
   * @param userId 用户ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unauthUDFFuncUsingGETWithHttpInfo(Integer userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthUDFFuncUsingGETRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthUDFFuncUsingGET", localVarResponse);
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthUDFFuncUsingGETRequestBuilder(Integer userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling unauthUDFFuncUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/unauth-udf-func";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * unauthorizedUser
   * 取消授权
   * @param alertgroupId 报警组ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result unauthorizedUserUsingGET(String alertgroupId) throws ApiException {
    ApiResponse<Result> localVarResponse = unauthorizedUserUsingGETWithHttpInfo(alertgroupId);
    return localVarResponse.getData();
  }

  /**
   * unauthorizedUser
   * 取消授权
   * @param alertgroupId 报警组ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> unauthorizedUserUsingGETWithHttpInfo(String alertgroupId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unauthorizedUserUsingGETRequestBuilder(alertgroupId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("unauthorizedUserUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unauthorizedUserUsingGETRequestBuilder(String alertgroupId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/unauth-user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("alertgroupId", alertgroupId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateAlertgroup
   * 编辑(更新)告警组
   * @param groupName 组名称 (required)
   * @param groupType 组类型 (required)
   * @param id 报警组ID (required)
   * @param description 备注(描述) (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateAlertgroupUsingPOST(String groupName, Object groupType, Integer id, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateAlertgroupUsingPOSTWithHttpInfo(groupName, groupType, id, description);
    return localVarResponse.getData();
  }

  /**
   * updateAlertgroup
   * 编辑(更新)告警组
   * @param groupName 组名称 (required)
   * @param groupType 组类型 (required)
   * @param id 报警组ID (required)
   * @param description 备注(描述) (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateAlertgroupUsingPOSTWithHttpInfo(String groupName, Object groupType, Integer id, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAlertgroupUsingPOSTRequestBuilder(groupName, groupType, id, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateAlertgroupUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAlertgroupUsingPOSTRequestBuilder(String groupName, Object groupType, Integer id, String description) throws ApiException {
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling updateAlertgroupUsingPOST");
    }
    // verify the required parameter 'groupType' is set
    if (groupType == null) {
      throw new ApiException(400, "Missing the required parameter 'groupType' when calling updateAlertgroupUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAlertgroupUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupType", groupType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateDataSource
   * 更新数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param id 数据源ID (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateDataSourceUsingPOST(String database, String host, Integer id, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    ApiResponse<Result> localVarResponse = updateDataSourceUsingPOSTWithHttpInfo(database, host, id, name, port, principal, type, userName, connectType, note, other, password);
    return localVarResponse.getData();
  }

  /**
   * updateDataSource
   * 更新数据源
   * @param database 数据库名 (required)
   * @param host IP主机名 (required)
   * @param id 数据源ID (required)
   * @param name 数据源名称 (required)
   * @param port 数据源端口 (required)
   * @param principal principal (required)
   * @param type 数据源类型 (required)
   * @param userName 用户名 (required)
   * @param connectType CONNECT_TYPE (optional)
   * @param note 数据源描述 (optional)
   * @param other jdbc连接参数，格式为:{\&quot;key1\&quot;:\&quot;value1\&quot;,...} (optional)
   * @param password 密码 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateDataSourceUsingPOSTWithHttpInfo(String database, String host, Integer id, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDataSourceUsingPOSTRequestBuilder(database, host, id, name, port, principal, type, userName, connectType, note, other, password);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateDataSourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDataSourceUsingPOSTRequestBuilder(String database, String host, Integer id, String name, String port, String principal, Object type, String userName, Object connectType, String note, String other, String password) throws ApiException {
    // verify the required parameter 'database' is set
    if (database == null) {
      throw new ApiException(400, "Missing the required parameter 'database' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'host' is set
    if (host == null) {
      throw new ApiException(400, "Missing the required parameter 'host' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'port' is set
    if (port == null) {
      throw new ApiException(400, "Missing the required parameter 'port' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'principal' is set
    if (principal == null) {
      throw new ApiException(400, "Missing the required parameter 'principal' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling updateDataSourceUsingPOST");
    }
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling updateDataSourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connectType", connectType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("host", host));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note", note));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("other", other));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("password", password));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("port", port));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("principal", principal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateProcessDefinition
   * 更新流程定义
   * @param connects 流程定义节点图标连接信息(json格式) (required)
   * @param id 流程定义ID (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param processDefinitionJson 流程定义详细信息(json格式) (required)
   * @param projectName 项目名称 (required)
   * @param description 流程定义描述信息 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProcessDefinitionUsingPOST(String connects, Integer id, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProcessDefinitionUsingPOSTWithHttpInfo(connects, id, locations, name, processDefinitionJson, projectName, description);
    return localVarResponse.getData();
  }

  /**
   * updateProcessDefinition
   * 更新流程定义
   * @param connects 流程定义节点图标连接信息(json格式) (required)
   * @param id 流程定义ID (required)
   * @param locations 流程定义节点坐标位置信息(json格式) (required)
   * @param name 流程定义名称 (required)
   * @param processDefinitionJson 流程定义详细信息(json格式) (required)
   * @param projectName 项目名称 (required)
   * @param description 流程定义描述信息 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProcessDefinitionUsingPOSTWithHttpInfo(String connects, Integer id, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProcessDefinitionUsingPOSTRequestBuilder(connects, id, locations, name, processDefinitionJson, projectName, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProcessDefinitionUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProcessDefinitionUsingPOSTRequestBuilder(String connects, Integer id, String locations, String name, String processDefinitionJson, String projectName, String description) throws ApiException {
    // verify the required parameter 'connects' is set
    if (connects == null) {
      throw new ApiException(400, "Missing the required parameter 'connects' when calling updateProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'locations' is set
    if (locations == null) {
      throw new ApiException(400, "Missing the required parameter 'locations' when calling updateProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'processDefinitionJson' is set
    if (processDefinitionJson == null) {
      throw new ApiException(400, "Missing the required parameter 'processDefinitionJson' when calling updateProcessDefinitionUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling updateProcessDefinitionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/update"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connects", connects));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processDefinitionJson", processDefinitionJson));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateProcessInstance
   * 更新流程实例
   * @param projectName 项目名称 (required)
   * @param connects 流程实例节点图标连接信息(json格式) (optional)
   * @param flag 是否恢复流程实例 (optional)
   * @param locations 流程实例节点坐标位置信息(json格式) (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param processInstanceJson 流程实例信息(json格式) (optional)
   * @param scheduleTime 定时时间 (optional)
   * @param syncDefine 更新流程实例的信息是否同步到流程定义 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProcessInstanceUsingPOST(String projectName, String connects, String flag, String locations, Integer processInstanceId, String processInstanceJson, String scheduleTime, String syncDefine) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProcessInstanceUsingPOSTWithHttpInfo(projectName, connects, flag, locations, processInstanceId, processInstanceJson, scheduleTime, syncDefine);
    return localVarResponse.getData();
  }

  /**
   * updateProcessInstance
   * 更新流程实例
   * @param projectName 项目名称 (required)
   * @param connects 流程实例节点图标连接信息(json格式) (optional)
   * @param flag 是否恢复流程实例 (optional)
   * @param locations 流程实例节点坐标位置信息(json格式) (optional)
   * @param processInstanceId 流程实例ID (optional)
   * @param processInstanceJson 流程实例信息(json格式) (optional)
   * @param scheduleTime 定时时间 (optional)
   * @param syncDefine 更新流程实例的信息是否同步到流程定义 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProcessInstanceUsingPOSTWithHttpInfo(String projectName, String connects, String flag, String locations, Integer processInstanceId, String processInstanceJson, String scheduleTime, String syncDefine) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProcessInstanceUsingPOSTRequestBuilder(projectName, connects, flag, locations, processInstanceId, processInstanceJson, scheduleTime, syncDefine);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProcessInstanceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProcessInstanceUsingPOSTRequestBuilder(String projectName, String connects, String flag, String locations, Integer processInstanceId, String processInstanceJson, String scheduleTime, String syncDefine) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling updateProcessInstanceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/update"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("connects", connects));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flag", flag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("locations", locations));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceJson", processInstanceJson));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduleTime", scheduleTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("syncDefine", syncDefine));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateProject
   * 更新项目
   * @param description 项目描述 (optional)
   * @param projectId 项目ID (optional)
   * @param projectName 项目名称 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateProjectUsingPOST(String description, Integer projectId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = updateProjectUsingPOSTWithHttpInfo(description, projectId, projectName);
    return localVarResponse.getData();
  }

  /**
   * updateProject
   * 更新项目
   * @param description 项目描述 (optional)
   * @param projectId 项目ID (optional)
   * @param projectName 项目名称 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateProjectUsingPOSTWithHttpInfo(String description, Integer projectId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateProjectUsingPOSTRequestBuilder(description, projectId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateProjectUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateProjectUsingPOSTRequestBuilder(String description, Integer projectId, String projectName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectId", projectId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("projectName", projectName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateQueue
   * UPDATE_QUEUE_NOTES
   * @param id 队列ID (required)
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateQueueUsingPOST(Integer id, String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = updateQueueUsingPOSTWithHttpInfo(id, queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * updateQueue
   * UPDATE_QUEUE_NOTES
   * @param id 队列ID (required)
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateQueueUsingPOSTWithHttpInfo(Integer id, String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateQueueUsingPOSTRequestBuilder(id, queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateQueueUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateQueueUsingPOSTRequestBuilder(Integer id, String queue, String queueName) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateQueueUsingPOST");
    }
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling updateQueueUsingPOST");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling updateQueueUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queue/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateResourceContent
   * 在线更新资源文件
   * @param content 资源文件内容 (required)
   * @param id 资源ID (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateResourceContentUsingPOST(String content, Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = updateResourceContentUsingPOSTWithHttpInfo(content, id);
    return localVarResponse.getData();
  }

  /**
   * updateResourceContent
   * 在线更新资源文件
   * @param content 资源文件内容 (required)
   * @param id 资源ID (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateResourceContentUsingPOSTWithHttpInfo(String content, Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateResourceContentUsingPOSTRequestBuilder(content, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateResourceContentUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateResourceContentUsingPOSTRequestBuilder(String content, Integer id) throws ApiException {
    // verify the required parameter 'content' is set
    if (content == null) {
      throw new ApiException(400, "Missing the required parameter 'content' when calling updateResourceContentUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateResourceContentUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/update-content";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateResource
   * 在线更新资源文件
   * @param id 资源ID (required)
   * @param name 资源文件名称 (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateResourceUsingPOST(Integer id, String name, Object type, Object file, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateResourceUsingPOSTWithHttpInfo(id, name, type, file, description);
    return localVarResponse.getData();
  }

  /**
   * updateResource
   * 在线更新资源文件
   * @param id 资源ID (required)
   * @param name 资源文件名称 (required)
   * @param type 资源文件类型 (required)
   * @param file 资源文件 (required)
   * @param description 资源文件描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateResourceUsingPOSTWithHttpInfo(Integer id, String name, Object type, Object file, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateResourceUsingPOSTRequestBuilder(id, name, type, file, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateResourceUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateResourceUsingPOSTRequestBuilder(Integer id, String name, Object type, Object file, String description) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateResourceUsingPOST");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling updateResourceUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling updateResourceUsingPOST");
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling updateResourceUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateSchedule
   * 更新定时
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateScheduleUsingPOST(Integer id, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    ApiResponse<Result> localVarResponse = updateScheduleUsingPOSTWithHttpInfo(id, projectName, failureStrategy, processInstancePriority, receivers, receiversCc, schedule, warningGroupId, warningType, workerGroup);
    return localVarResponse.getData();
  }

  /**
   * updateSchedule
   * 更新定时
   * @param id 定时ID (required)
   * @param projectName 项目名称 (required)
   * @param failureStrategy 失败策略 (optional)
   * @param processInstancePriority 流程实例优先级 (optional)
   * @param receivers 收件人 (optional)
   * @param receiversCc 收件人(抄送) (optional)
   * @param schedule 定时 (optional)
   * @param warningGroupId 发送组ID (optional)
   * @param warningType 发送策略 (optional)
   * @param workerGroup workerGroup (optional, default to default)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateScheduleUsingPOSTWithHttpInfo(Integer id, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateScheduleUsingPOSTRequestBuilder(id, projectName, failureStrategy, processInstancePriority, receivers, receiversCc, schedule, warningGroupId, warningType, workerGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateScheduleUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateScheduleUsingPOSTRequestBuilder(Integer id, String projectName, String failureStrategy, String processInstancePriority, String receivers, String receiversCc, String schedule, Integer warningGroupId, String warningType, String workerGroup) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateScheduleUsingPOST");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling updateScheduleUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/schedule/update"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("failureStrategy", failureStrategy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstancePriority", processInstancePriority));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receivers", receivers));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("receiversCc", receiversCc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schedule", schedule));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningGroupId", warningGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("warningType", warningType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("workerGroup", workerGroup));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateTenant
   * 更新租户
   * @param id id (required)
   * @param queueId 队列ID (required)
   * @param tenantCode 租户编码 (required)
   * @param tenantName 租户名称 (required)
   * @param description 租户描述 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateTenantUsingPOST(Integer id, Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateTenantUsingPOSTWithHttpInfo(id, queueId, tenantCode, tenantName, description);
    return localVarResponse.getData();
  }

  /**
   * updateTenant
   * 更新租户
   * @param id id (required)
   * @param queueId 队列ID (required)
   * @param tenantCode 租户编码 (required)
   * @param tenantName 租户名称 (required)
   * @param description 租户描述 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateTenantUsingPOSTWithHttpInfo(Integer id, Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTenantUsingPOSTRequestBuilder(id, queueId, tenantCode, tenantName, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateTenantUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTenantUsingPOSTRequestBuilder(Integer id, Integer queueId, String tenantCode, String tenantName, String description) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTenantUsingPOST");
    }
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling updateTenantUsingPOST");
    }
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling updateTenantUsingPOST");
    }
    // verify the required parameter 'tenantName' is set
    if (tenantName == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantName' when calling updateTenantUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueId", queueId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantName", tenantName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateUdfFunc
   * 更新udf函数
   * @param className className (required)
   * @param funcName 函数名称 (required)
   * @param id 资源ID (required)
   * @param resourceId resourceId (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateUdfFuncUsingPOST(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    ApiResponse<Result> localVarResponse = updateUdfFuncUsingPOSTWithHttpInfo(className, funcName, id, resourceId, type, argTypes, database, description);
    return localVarResponse.getData();
  }

  /**
   * updateUdfFunc
   * 更新udf函数
   * @param className className (required)
   * @param funcName 函数名称 (required)
   * @param id 资源ID (required)
   * @param resourceId resourceId (required)
   * @param type UDF类型 (required)
   * @param argTypes 参数 (optional)
   * @param database 数据库名 (optional)
   * @param description udf描述，使用说明 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateUdfFuncUsingPOSTWithHttpInfo(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUdfFuncUsingPOSTRequestBuilder(className, funcName, id, resourceId, type, argTypes, database, description);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateUdfFuncUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUdfFuncUsingPOSTRequestBuilder(String className, String funcName, Integer id, Integer resourceId, Object type, String argTypes, String database, String description) throws ApiException {
    // verify the required parameter 'className' is set
    if (className == null) {
      throw new ApiException(400, "Missing the required parameter 'className' when calling updateUdfFuncUsingPOST");
    }
    // verify the required parameter 'funcName' is set
    if (funcName == null) {
      throw new ApiException(400, "Missing the required parameter 'funcName' when calling updateUdfFuncUsingPOST");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUdfFuncUsingPOST");
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceId' when calling updateUdfFuncUsingPOST");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling updateUdfFuncUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("argTypes", argTypes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("className", className));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("database", database));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("description", description));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("funcName", funcName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resourceId", resourceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * updateUser
   * 更新用户
   * @param email 邮箱 (optional)
   * @param id 用户ID (optional)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param tenantId 租户ID (optional)
   * @param userName 用户名 (optional)
   * @param userPassword 用户密码 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result updateUserUsingPOST(Integer email, Integer id, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {
    ApiResponse<Result> localVarResponse = updateUserUsingPOSTWithHttpInfo(email, id, phone, queue, tenantId, userName, userPassword);
    return localVarResponse.getData();
  }

  /**
   * updateUser
   * 更新用户
   * @param email 邮箱 (optional)
   * @param id 用户ID (optional)
   * @param phone 手机号 (optional)
   * @param queue 使用的队列 (optional)
   * @param tenantId 租户ID (optional)
   * @param userName 用户名 (optional)
   * @param userPassword 用户密码 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> updateUserUsingPOSTWithHttpInfo(Integer email, Integer id, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUserUsingPOSTRequestBuilder(email, id, phone, queue, tenantId, userName, userPassword);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("updateUserUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUserUsingPOSTRequestBuilder(Integer email, Integer id, Integer phone, Integer queue, Integer tenantId, String userName, String userPassword) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/update";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("email", email));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("phone", phone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantId", tenantId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userPassword", userPassword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyDataSourceName
   * 验证数据源
   * @param name 数据源名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyDataSourceNameUsingGET(String name) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyDataSourceNameUsingGETWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * verifyDataSourceName
   * 验证数据源
   * @param name 数据源名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyDataSourceNameUsingGETWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyDataSourceNameUsingGETRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyDataSourceNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyDataSourceNameUsingGETRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyDataSourceNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasources/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyGroupName
   * 检查告警组是否存在
   * @param groupName 组名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyGroupNameUsingGET(String groupName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyGroupNameUsingGETWithHttpInfo(groupName);
    return localVarResponse.getData();
  }

  /**
   * verifyGroupName
   * 检查告警组是否存在
   * @param groupName 组名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyGroupNameUsingGETWithHttpInfo(String groupName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyGroupNameUsingGETRequestBuilder(groupName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyGroupNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyGroupNameUsingGETRequestBuilder(String groupName) throws ApiException {
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      throw new ApiException(400, "Missing the required parameter 'groupName' when calling verifyGroupNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/alert-group/verify-group-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupName", groupName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verify-name
   * 验证流程定义名字
   * @param name 流程定义名称 (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyProcessDefinitionNameUsingGET(String name, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyProcessDefinitionNameUsingGETWithHttpInfo(name, projectName);
    return localVarResponse.getData();
  }

  /**
   * verify-name
   * 验证流程定义名字
   * @param name 流程定义名称 (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyProcessDefinitionNameUsingGETWithHttpInfo(String name, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyProcessDefinitionNameUsingGETRequestBuilder(name, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyProcessDefinitionNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyProcessDefinitionNameUsingGETRequestBuilder(String name, String projectName) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyProcessDefinitionNameUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling verifyProcessDefinitionNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/verify-name"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyQueue
   * 验证队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyQueueUsingPOST(String queue, String queueName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyQueueUsingPOSTWithHttpInfo(queue, queueName);
    return localVarResponse.getData();
  }

  /**
   * verifyQueue
   * 验证队列
   * @param queue hadoop yarn队列名 (required)
   * @param queueName 队列名 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyQueueUsingPOSTWithHttpInfo(String queue, String queueName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyQueueUsingPOSTRequestBuilder(queue, queueName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyQueueUsingPOST", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyQueueUsingPOSTRequestBuilder(String queue, String queueName) throws ApiException {
    // verify the required parameter 'queue' is set
    if (queue == null) {
      throw new ApiException(400, "Missing the required parameter 'queue' when calling verifyQueueUsingPOST");
    }
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      throw new ApiException(400, "Missing the required parameter 'queueName' when calling verifyQueueUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/queue/verify-queue";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queue", queue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("queueName", queueName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyResourceName
   * VERIFY_RESOURCE_NAME_NOTES
   * @param fullName RESOURCE_FULL_NAME (required)
   * @param type 资源文件类型 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyResourceNameUsingGET(String fullName, Object type) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyResourceNameUsingGETWithHttpInfo(fullName, type);
    return localVarResponse.getData();
  }

  /**
   * verifyResourceName
   * VERIFY_RESOURCE_NAME_NOTES
   * @param fullName RESOURCE_FULL_NAME (required)
   * @param type 资源文件类型 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyResourceNameUsingGETWithHttpInfo(String fullName, Object type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyResourceNameUsingGETRequestBuilder(fullName, type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyResourceNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyResourceNameUsingGETRequestBuilder(String fullName, Object type) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling verifyResourceNameUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(400, "Missing the required parameter 'type' when calling verifyResourceNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fullName", fullName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyTenantCode
   * VERIFY_TENANT_CODE_NOTES
   * @param tenantCode 租户编码 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyTenantCodeUsingGET(String tenantCode) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyTenantCodeUsingGETWithHttpInfo(tenantCode);
    return localVarResponse.getData();
  }

  /**
   * verifyTenantCode
   * VERIFY_TENANT_CODE_NOTES
   * @param tenantCode 租户编码 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyTenantCodeUsingGETWithHttpInfo(String tenantCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyTenantCodeUsingGETRequestBuilder(tenantCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyTenantCodeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyTenantCodeUsingGETRequestBuilder(String tenantCode) throws ApiException {
    // verify the required parameter 'tenantCode' is set
    if (tenantCode == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantCode' when calling verifyTenantCodeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/tenant/verify-tenant-code";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tenantCode", tenantCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyUdfFuncName
   * 验证udf函数名
   * @param name 函数名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyUdfFuncNameUsingGET(String name) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyUdfFuncNameUsingGETWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * verifyUdfFuncName
   * 验证udf函数名
   * @param name 函数名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyUdfFuncNameUsingGETWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyUdfFuncNameUsingGETRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyUdfFuncNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyUdfFuncNameUsingGETRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling verifyUdfFuncNameUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/verify-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * verifyUserName
   * 验证用户名
   * @param userName 用户名 (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result verifyUserNameUsingGET(String userName) throws ApiException {
    ApiResponse<Result> localVarResponse = verifyUserNameUsingGETWithHttpInfo(userName);
    return localVarResponse.getData();
  }

  /**
   * verifyUserName
   * 验证用户名
   * @param userName 用户名 (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> verifyUserNameUsingGETWithHttpInfo(String userName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyUserNameUsingGETRequestBuilder(userName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("verifyUserNameUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyUserNameUsingGETRequestBuilder(String userName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/users/verify-user-name";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userName", userName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewResource
   * 浏览资源通通过ID
   * @param id 资源ID (required)
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewResourceUsingGET(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    ApiResponse<Result> localVarResponse = viewResourceUsingGETWithHttpInfo(id, limit, skipLineNum);
    return localVarResponse.getData();
  }

  /**
   * viewResource
   * 浏览资源通通过ID
   * @param id 资源ID (required)
   * @param limit 显示多少条 (required)
   * @param skipLineNum 忽略行数 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewResourceUsingGETWithHttpInfo(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewResourceUsingGETRequestBuilder(id, limit, skipLineNum);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewResourceUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewResourceUsingGETRequestBuilder(Integer id, Integer limit, Integer skipLineNum) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewResourceUsingGET");
    }
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling viewResourceUsingGET");
    }
    // verify the required parameter 'skipLineNum' is set
    if (skipLineNum == null) {
      throw new ApiException(400, "Missing the required parameter 'skipLineNum' when calling viewResourceUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/view";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipLineNum", skipLineNum));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewTree
   * 树状图
   * @param limit 显示多少条 (required)
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewTreeUsingGET(Integer limit, Integer processId, String projectName) throws ApiException {
    ApiResponse<Result> localVarResponse = viewTreeUsingGETWithHttpInfo(limit, processId, projectName);
    return localVarResponse.getData();
  }

  /**
   * viewTree
   * 树状图
   * @param limit 显示多少条 (required)
   * @param processId 流程定义ID (required)
   * @param projectName 项目名称 (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewTreeUsingGETWithHttpInfo(Integer limit, Integer processId, String projectName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewTreeUsingGETRequestBuilder(limit, processId, projectName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewTreeUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewTreeUsingGETRequestBuilder(Integer limit, Integer processId, String projectName) throws ApiException {
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling viewTreeUsingGET");
    }
    // verify the required parameter 'processId' is set
    if (processId == null) {
      throw new ApiException(400, "Missing the required parameter 'processId' when calling viewTreeUsingGET");
    }
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling viewTreeUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/process/view-tree"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processId", processId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * vieGanttTree
   * 浏览Gantt图
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewTreeUsingGET1(String projectName, Integer processInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = viewTreeUsingGET1WithHttpInfo(projectName, processInstanceId);
    return localVarResponse.getData();
  }

  /**
   * vieGanttTree
   * 浏览Gantt图
   * @param projectName 项目名称 (required)
   * @param processInstanceId 流程实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewTreeUsingGET1WithHttpInfo(String projectName, Integer processInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewTreeUsingGET1RequestBuilder(projectName, processInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewTreeUsingGET1", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewTreeUsingGET1RequestBuilder(String projectName, Integer processInstanceId) throws ApiException {
    // verify the required parameter 'projectName' is set
    if (projectName == null) {
      throw new ApiException(400, "Missing the required parameter 'projectName' when calling viewTreeUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/view-gantt"
        .replace("{projectName}", ApiClient.urlEncode(projectName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewUIUdfFunction
   * 查看udf函数
   * @param id id (required)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewUIUdfFunctionUsingGET(Integer id) throws ApiException {
    ApiResponse<Result> localVarResponse = viewUIUdfFunctionUsingGETWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * viewUIUdfFunction
   * 查看udf函数
   * @param id id (required)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewUIUdfFunctionUsingGETWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewUIUdfFunctionUsingGETRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewUIUdfFunctionUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewUIUdfFunctionUsingGETRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling viewUIUdfFunctionUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/resources/udf-func/update-ui";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * viewVariables
   * 查询流程实例全局变量和局部变量
   * @param processInstanceId 流程实例ID (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result viewVariablesUsingGET(Integer processInstanceId) throws ApiException {
    ApiResponse<Result> localVarResponse = viewVariablesUsingGETWithHttpInfo(processInstanceId);
    return localVarResponse.getData();
  }

  /**
   * viewVariables
   * 查询流程实例全局变量和局部变量
   * @param processInstanceId 流程实例ID (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> viewVariablesUsingGETWithHttpInfo(Integer processInstanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewVariablesUsingGETRequestBuilder(processInstanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("viewVariablesUsingGET", localVarResponse);
      }
      return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewVariablesUsingGETRequestBuilder(Integer processInstanceId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{projectName}/instance/view-variables";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("processInstanceId", processInstanceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
