plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'com.bmuschko.docker-spring-boot-application' version "${bmuschkoDocker}"
}
version "${damProfilesActive}-v${dmDatastandardsVersion}"
group "com.qk.dm.dataquery"
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}
processResources {
    expand(project.properties)
}
docker {
    dockerCreateDockerfile {
        environmentVariable 'TimeZone', 'Asia/Shanghai'
        instruction 'RUN ln -snf /usr/share/zoneinfo/$TimeZone /etc/localtime && echo $TimeZone > /etc/timezone'
    }
    springBootApplication {
        baseImage = "${jre11Image}"
        ports = [8788]
        images = ["${imagePush}/${project.name}:${version}"]
        jvmArgs = ['-Xmx248m']
    }
}
dependencies {
    implementation project(":dam-mvc-validation")
    implementation project(":dam-log")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-loadbalancer"

    implementation project(":qk-datasource")
    implementation project(":qk-sqlparser")
    implementation project(":dm-das-feign")
    implementation project(":dm-datasource-feign")
    implementation project(":dam-boot-cache-starter")

    implementation 'org.mybatis:mybatis:3.5.9'
    compile 'com.github.pagehelper:pagehelper:5.3.0'

    implementation 'org.mapstruct:mapstruct'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('org.junit.platform:junit-platform-launcher')

    annotationProcessor(
            "javax.annotation:javax.annotation-api",
            "org.projectlombok:lombok",
            'org.mapstruct:mapstruct-processor')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testAnnotationProcessor(
            "javax.annotation:javax.annotation-api",
            "org.projectlombok:lombok",
            'org.mapstruct:mapstruct-processor')
}
dependencyManagement {
    imports {
        mavenBom "com.qk.dam:dam-dependencies:${damDependenciesVersion}"
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}